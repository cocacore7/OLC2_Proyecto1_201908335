Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> initial
Rule 1     initial -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> p_print
Rule 5     instruction -> p_println
Rule 6     instruction -> declaration
Rule 7     instruction -> function
Rule 8     instruction -> callFuncSt
Rule 9     instruction -> whileSt
Rule 10    instruction -> ifSt
Rule 11    empty -> <empty>
Rule 12    p_print -> PRINT PARIZQ exp PARDER PTCOMA
Rule 13    p_println -> PRINTLN PARIZQ exp PARDER PTCOMA
Rule 14    declaration -> ID IGUAL exp PTCOMA
Rule 15    declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA
Rule 16    function -> FUNCTION ID parametersFunc DOSPT typeDef block
Rule 17    parametersFunc -> PARIZQ parameters PARDER
Rule 18    parametersFunc -> PARIZQ PARDER
Rule 19    callFuncSt -> ID parametersCallFunc PTCOMA
Rule 20    parameters -> parameters COMA parameter
Rule 21    parameters -> parameter
Rule 22    parameter -> ID DOSPT typeDef
Rule 23    parametersCallFunc -> PARIZQ listValues PARDER
Rule 24    parametersCallFunc -> PARIZQ PARDER
Rule 25    block -> LLAVEIZQ instructions LLAVEDER
Rule 26    block -> LLAVEIZQ LLAVEDER
Rule 27    whileSt -> RWHILE PARIZQ exp PARDER block
Rule 28    ifSt -> RIF PARIZQ exp PARDER block elseSt
Rule 29    elseSt -> RELSE block
Rule 30    elseSt -> ifSt
Rule 31    decArray -> CORIZQ CORDER
Rule 32    decArray -> empty
Rule 33    listValues -> listValues COMA exp
Rule 34    listValues -> exp
Rule 35    typeDef -> RINT
Rule 36    typeDef -> RFLOAT
Rule 37    typeDef -> RSTRING
Rule 38    typeDef -> RCHAR
Rule 39    typeDef -> RBOOL
Rule 40    exp -> exp MAS exp
Rule 41    exp -> exp MENOS exp
Rule 42    exp -> exp MULTIPLICACION exp
Rule 43    exp -> exp DIVISION exp
Rule 44    exp -> exp POTENCIA exp
Rule 45    exp -> exp MODULO exp
Rule 46    exp -> exp MAYOR exp
Rule 47    exp -> exp MENOR exp
Rule 48    exp -> exp IGUALIGUAL exp
Rule 49    exp -> exp MAYORIGUAL exp
Rule 50    exp -> exp MENORIGUAL exp
Rule 51    exp -> exp DISTINTO exp
Rule 52    exp -> exp ANDD exp
Rule 53    exp -> exp ORR exp
Rule 54    exp -> NOTT exp
Rule 55    exp -> PARIZQ exp PARDER
Rule 56    exp -> ENTERO
Rule 57    exp -> DECIMAL
Rule 58    exp -> STRING
Rule 59    exp -> CHAR
Rule 60    exp -> VERDADERO
Rule 61    exp -> FALSO
Rule 62    exp -> NULO
Rule 63    exp -> ID
Rule 64    exp -> ID listArray
Rule 65    exp -> CORIZQ listValues CORDER
Rule 66    listArray -> listArray CORIZQ exp CORDER
Rule 67    listArray -> CORIZQ exp CORDER

Terminals, with rules where they appear

ANDD                 : 52
CHAR                 : 59
COMA                 : 20 33
CORDER               : 31 65 66 67
CORIZQ               : 31 65 66 67
DECIMAL              : 57
DISTINTO             : 51
DIVISION             : 43
DOSPT                : 15 15 16 22
ENTERO               : 56
FALSO                : 61
FUNCTION             : 16
ID                   : 14 15 16 19 22 63 64
IGUAL                : 14 15
IGUALIGUAL           : 48
LLAVEDER             : 25 26
LLAVEIZQ             : 25 26
MAS                  : 40
MAYOR                : 46
MAYORIGUAL           : 49
MENOR                : 47
MENORIGUAL           : 50
MENOS                : 41
MODULO               : 45
MULTIPLICACION       : 42
NOTT                 : 54
NULO                 : 62
ORR                  : 53
PARDER               : 12 13 17 18 23 24 27 28 55
PARIZQ               : 12 13 17 18 23 24 27 28 55
POTENCIA             : 44
PRINT                : 12
PRINTLN              : 13
PTCOMA               : 12 13 14 15 19
RBOOL                : 39
RCHAR                : 38
RELSE                : 29
RFLOAT               : 36
RIF                  : 28
RINT                 : 35
RSTRING              : 37
RWHILE               : 27
STRING               : 58
VERDADERO            : 60
error                : 

Nonterminals, with rules where they appear

block                : 16 27 28 29
callFuncSt           : 8
decArray             : 
declaration          : 6
elseSt               : 28
empty                : 32
exp                  : 12 13 14 15 27 28 33 34 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 55 66 67
function             : 7
ifSt                 : 10 30
initial              : 0
instruction          : 2 3
instructions         : 1 2 25
listArray            : 64 66
listValues           : 23 33 65
p_print              : 4
p_println            : 5
parameter            : 20 21
parameters           : 17 20
parametersCallFunc   : 19
parametersFunc       : 16
typeDef              : 15 16 22
whileSt              : 9

Parsing method: LALR

state 0

    (0) S' -> . initial
    (1) initial -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . function
    (8) instruction -> . callFuncSt
    (9) instruction -> . whileSt
    (10) instruction -> . ifSt
    (12) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (13) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (14) declaration -> . ID IGUAL exp PTCOMA
    (15) declaration -> . ID IGUAL exp DOSPT DOSPT typeDef PTCOMA
    (16) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (19) callFuncSt -> . ID parametersCallFunc PTCOMA
    (27) whileSt -> . RWHILE PARIZQ exp PARDER block
    (28) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    FUNCTION        shift and go to state 14
    RWHILE          shift and go to state 15
    RIF             shift and go to state 16

    initial                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    function                       shift and go to state 7
    callFuncSt                     shift and go to state 8
    whileSt                        shift and go to state 9
    ifSt                           shift and go to state 10

state 1

    (0) S' -> initial .



state 2

    (1) initial -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . function
    (8) instruction -> . callFuncSt
    (9) instruction -> . whileSt
    (10) instruction -> . ifSt
    (12) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (13) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (14) declaration -> . ID IGUAL exp PTCOMA
    (15) declaration -> . ID IGUAL exp DOSPT DOSPT typeDef PTCOMA
    (16) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (19) callFuncSt -> . ID parametersCallFunc PTCOMA
    (27) whileSt -> . RWHILE PARIZQ exp PARDER block
    (28) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    $end            reduce using rule 1 (initial -> instructions .)
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    FUNCTION        shift and go to state 14
    RWHILE          shift and go to state 15
    RIF             shift and go to state 16

    instruction                    shift and go to state 17
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    function                       shift and go to state 7
    callFuncSt                     shift and go to state 8
    whileSt                        shift and go to state 9
    ifSt                           shift and go to state 10

state 3

    (3) instructions -> instruction .

    PRINT           reduce using rule 3 (instructions -> instruction .)
    PRINTLN         reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    FUNCTION        reduce using rule 3 (instructions -> instruction .)
    RWHILE          reduce using rule 3 (instructions -> instruction .)
    RIF             reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    LLAVEDER        reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> p_print .

    PRINT           reduce using rule 4 (instruction -> p_print .)
    PRINTLN         reduce using rule 4 (instruction -> p_print .)
    ID              reduce using rule 4 (instruction -> p_print .)
    FUNCTION        reduce using rule 4 (instruction -> p_print .)
    RWHILE          reduce using rule 4 (instruction -> p_print .)
    RIF             reduce using rule 4 (instruction -> p_print .)
    $end            reduce using rule 4 (instruction -> p_print .)
    LLAVEDER        reduce using rule 4 (instruction -> p_print .)


state 5

    (5) instruction -> p_println .

    PRINT           reduce using rule 5 (instruction -> p_println .)
    PRINTLN         reduce using rule 5 (instruction -> p_println .)
    ID              reduce using rule 5 (instruction -> p_println .)
    FUNCTION        reduce using rule 5 (instruction -> p_println .)
    RWHILE          reduce using rule 5 (instruction -> p_println .)
    RIF             reduce using rule 5 (instruction -> p_println .)
    $end            reduce using rule 5 (instruction -> p_println .)
    LLAVEDER        reduce using rule 5 (instruction -> p_println .)


state 6

    (6) instruction -> declaration .

    PRINT           reduce using rule 6 (instruction -> declaration .)
    PRINTLN         reduce using rule 6 (instruction -> declaration .)
    ID              reduce using rule 6 (instruction -> declaration .)
    FUNCTION        reduce using rule 6 (instruction -> declaration .)
    RWHILE          reduce using rule 6 (instruction -> declaration .)
    RIF             reduce using rule 6 (instruction -> declaration .)
    $end            reduce using rule 6 (instruction -> declaration .)
    LLAVEDER        reduce using rule 6 (instruction -> declaration .)


state 7

    (7) instruction -> function .

    PRINT           reduce using rule 7 (instruction -> function .)
    PRINTLN         reduce using rule 7 (instruction -> function .)
    ID              reduce using rule 7 (instruction -> function .)
    FUNCTION        reduce using rule 7 (instruction -> function .)
    RWHILE          reduce using rule 7 (instruction -> function .)
    RIF             reduce using rule 7 (instruction -> function .)
    $end            reduce using rule 7 (instruction -> function .)
    LLAVEDER        reduce using rule 7 (instruction -> function .)


state 8

    (8) instruction -> callFuncSt .

    PRINT           reduce using rule 8 (instruction -> callFuncSt .)
    PRINTLN         reduce using rule 8 (instruction -> callFuncSt .)
    ID              reduce using rule 8 (instruction -> callFuncSt .)
    FUNCTION        reduce using rule 8 (instruction -> callFuncSt .)
    RWHILE          reduce using rule 8 (instruction -> callFuncSt .)
    RIF             reduce using rule 8 (instruction -> callFuncSt .)
    $end            reduce using rule 8 (instruction -> callFuncSt .)
    LLAVEDER        reduce using rule 8 (instruction -> callFuncSt .)


state 9

    (9) instruction -> whileSt .

    PRINT           reduce using rule 9 (instruction -> whileSt .)
    PRINTLN         reduce using rule 9 (instruction -> whileSt .)
    ID              reduce using rule 9 (instruction -> whileSt .)
    FUNCTION        reduce using rule 9 (instruction -> whileSt .)
    RWHILE          reduce using rule 9 (instruction -> whileSt .)
    RIF             reduce using rule 9 (instruction -> whileSt .)
    $end            reduce using rule 9 (instruction -> whileSt .)
    LLAVEDER        reduce using rule 9 (instruction -> whileSt .)


state 10

    (10) instruction -> ifSt .

    PRINT           reduce using rule 10 (instruction -> ifSt .)
    PRINTLN         reduce using rule 10 (instruction -> ifSt .)
    ID              reduce using rule 10 (instruction -> ifSt .)
    FUNCTION        reduce using rule 10 (instruction -> ifSt .)
    RWHILE          reduce using rule 10 (instruction -> ifSt .)
    RIF             reduce using rule 10 (instruction -> ifSt .)
    $end            reduce using rule 10 (instruction -> ifSt .)
    LLAVEDER        reduce using rule 10 (instruction -> ifSt .)


state 11

    (12) p_print -> PRINT . PARIZQ exp PARDER PTCOMA

    PARIZQ          shift and go to state 18


state 12

    (13) p_println -> PRINTLN . PARIZQ exp PARDER PTCOMA

    PARIZQ          shift and go to state 19


state 13

    (14) declaration -> ID . IGUAL exp PTCOMA
    (15) declaration -> ID . IGUAL exp DOSPT DOSPT typeDef PTCOMA
    (19) callFuncSt -> ID . parametersCallFunc PTCOMA
    (23) parametersCallFunc -> . PARIZQ listValues PARDER
    (24) parametersCallFunc -> . PARIZQ PARDER

    IGUAL           shift and go to state 20
    PARIZQ          shift and go to state 22

    parametersCallFunc             shift and go to state 21

state 14

    (16) function -> FUNCTION . ID parametersFunc DOSPT typeDef block

    ID              shift and go to state 23


state 15

    (27) whileSt -> RWHILE . PARIZQ exp PARDER block

    PARIZQ          shift and go to state 24


state 16

    (28) ifSt -> RIF . PARIZQ exp PARDER block elseSt

    PARIZQ          shift and go to state 25


state 17

    (2) instructions -> instructions instruction .

    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    PRINTLN         reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    FUNCTION        reduce using rule 2 (instructions -> instructions instruction .)
    RWHILE          reduce using rule 2 (instructions -> instructions instruction .)
    RIF             reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    LLAVEDER        reduce using rule 2 (instructions -> instructions instruction .)


state 18

    (12) p_print -> PRINT PARIZQ . exp PARDER PTCOMA
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 27

state 19

    (13) p_println -> PRINTLN PARIZQ . exp PARDER PTCOMA
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 38

state 20

    (14) declaration -> ID IGUAL . exp PTCOMA
    (15) declaration -> ID IGUAL . exp DOSPT DOSPT typeDef PTCOMA
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 39

state 21

    (19) callFuncSt -> ID parametersCallFunc . PTCOMA

    PTCOMA          shift and go to state 40


state 22

    (23) parametersCallFunc -> PARIZQ . listValues PARDER
    (24) parametersCallFunc -> PARIZQ . PARDER
    (33) listValues -> . listValues COMA exp
    (34) listValues -> . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    PARDER          shift and go to state 42
    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    listValues                     shift and go to state 41
    exp                            shift and go to state 43

state 23

    (16) function -> FUNCTION ID . parametersFunc DOSPT typeDef block
    (17) parametersFunc -> . PARIZQ parameters PARDER
    (18) parametersFunc -> . PARIZQ PARDER

    PARIZQ          shift and go to state 45

    parametersFunc                 shift and go to state 44

state 24

    (27) whileSt -> RWHILE PARIZQ . exp PARDER block
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 46

state 25

    (28) ifSt -> RIF PARIZQ . exp PARDER block elseSt
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 47

state 26

    (55) exp -> PARIZQ . exp PARDER
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 48

state 27

    (12) p_print -> PRINT PARIZQ exp . PARDER PTCOMA
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          shift and go to state 49
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 28

    (54) exp -> NOTT . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 64

state 29

    (56) exp -> ENTERO .

    PARDER          reduce using rule 56 (exp -> ENTERO .)
    MAS             reduce using rule 56 (exp -> ENTERO .)
    MENOS           reduce using rule 56 (exp -> ENTERO .)
    MULTIPLICACION  reduce using rule 56 (exp -> ENTERO .)
    DIVISION        reduce using rule 56 (exp -> ENTERO .)
    POTENCIA        reduce using rule 56 (exp -> ENTERO .)
    MODULO          reduce using rule 56 (exp -> ENTERO .)
    MAYOR           reduce using rule 56 (exp -> ENTERO .)
    MENOR           reduce using rule 56 (exp -> ENTERO .)
    IGUALIGUAL      reduce using rule 56 (exp -> ENTERO .)
    MAYORIGUAL      reduce using rule 56 (exp -> ENTERO .)
    MENORIGUAL      reduce using rule 56 (exp -> ENTERO .)
    DISTINTO        reduce using rule 56 (exp -> ENTERO .)
    ANDD            reduce using rule 56 (exp -> ENTERO .)
    ORR             reduce using rule 56 (exp -> ENTERO .)
    PTCOMA          reduce using rule 56 (exp -> ENTERO .)
    DOSPT           reduce using rule 56 (exp -> ENTERO .)
    COMA            reduce using rule 56 (exp -> ENTERO .)
    CORDER          reduce using rule 56 (exp -> ENTERO .)


state 30

    (57) exp -> DECIMAL .

    PARDER          reduce using rule 57 (exp -> DECIMAL .)
    MAS             reduce using rule 57 (exp -> DECIMAL .)
    MENOS           reduce using rule 57 (exp -> DECIMAL .)
    MULTIPLICACION  reduce using rule 57 (exp -> DECIMAL .)
    DIVISION        reduce using rule 57 (exp -> DECIMAL .)
    POTENCIA        reduce using rule 57 (exp -> DECIMAL .)
    MODULO          reduce using rule 57 (exp -> DECIMAL .)
    MAYOR           reduce using rule 57 (exp -> DECIMAL .)
    MENOR           reduce using rule 57 (exp -> DECIMAL .)
    IGUALIGUAL      reduce using rule 57 (exp -> DECIMAL .)
    MAYORIGUAL      reduce using rule 57 (exp -> DECIMAL .)
    MENORIGUAL      reduce using rule 57 (exp -> DECIMAL .)
    DISTINTO        reduce using rule 57 (exp -> DECIMAL .)
    ANDD            reduce using rule 57 (exp -> DECIMAL .)
    ORR             reduce using rule 57 (exp -> DECIMAL .)
    PTCOMA          reduce using rule 57 (exp -> DECIMAL .)
    DOSPT           reduce using rule 57 (exp -> DECIMAL .)
    COMA            reduce using rule 57 (exp -> DECIMAL .)
    CORDER          reduce using rule 57 (exp -> DECIMAL .)


state 31

    (58) exp -> STRING .

    PARDER          reduce using rule 58 (exp -> STRING .)
    MAS             reduce using rule 58 (exp -> STRING .)
    MENOS           reduce using rule 58 (exp -> STRING .)
    MULTIPLICACION  reduce using rule 58 (exp -> STRING .)
    DIVISION        reduce using rule 58 (exp -> STRING .)
    POTENCIA        reduce using rule 58 (exp -> STRING .)
    MODULO          reduce using rule 58 (exp -> STRING .)
    MAYOR           reduce using rule 58 (exp -> STRING .)
    MENOR           reduce using rule 58 (exp -> STRING .)
    IGUALIGUAL      reduce using rule 58 (exp -> STRING .)
    MAYORIGUAL      reduce using rule 58 (exp -> STRING .)
    MENORIGUAL      reduce using rule 58 (exp -> STRING .)
    DISTINTO        reduce using rule 58 (exp -> STRING .)
    ANDD            reduce using rule 58 (exp -> STRING .)
    ORR             reduce using rule 58 (exp -> STRING .)
    PTCOMA          reduce using rule 58 (exp -> STRING .)
    DOSPT           reduce using rule 58 (exp -> STRING .)
    COMA            reduce using rule 58 (exp -> STRING .)
    CORDER          reduce using rule 58 (exp -> STRING .)


state 32

    (59) exp -> CHAR .

    PARDER          reduce using rule 59 (exp -> CHAR .)
    MAS             reduce using rule 59 (exp -> CHAR .)
    MENOS           reduce using rule 59 (exp -> CHAR .)
    MULTIPLICACION  reduce using rule 59 (exp -> CHAR .)
    DIVISION        reduce using rule 59 (exp -> CHAR .)
    POTENCIA        reduce using rule 59 (exp -> CHAR .)
    MODULO          reduce using rule 59 (exp -> CHAR .)
    MAYOR           reduce using rule 59 (exp -> CHAR .)
    MENOR           reduce using rule 59 (exp -> CHAR .)
    IGUALIGUAL      reduce using rule 59 (exp -> CHAR .)
    MAYORIGUAL      reduce using rule 59 (exp -> CHAR .)
    MENORIGUAL      reduce using rule 59 (exp -> CHAR .)
    DISTINTO        reduce using rule 59 (exp -> CHAR .)
    ANDD            reduce using rule 59 (exp -> CHAR .)
    ORR             reduce using rule 59 (exp -> CHAR .)
    PTCOMA          reduce using rule 59 (exp -> CHAR .)
    DOSPT           reduce using rule 59 (exp -> CHAR .)
    COMA            reduce using rule 59 (exp -> CHAR .)
    CORDER          reduce using rule 59 (exp -> CHAR .)


state 33

    (60) exp -> VERDADERO .

    PARDER          reduce using rule 60 (exp -> VERDADERO .)
    MAS             reduce using rule 60 (exp -> VERDADERO .)
    MENOS           reduce using rule 60 (exp -> VERDADERO .)
    MULTIPLICACION  reduce using rule 60 (exp -> VERDADERO .)
    DIVISION        reduce using rule 60 (exp -> VERDADERO .)
    POTENCIA        reduce using rule 60 (exp -> VERDADERO .)
    MODULO          reduce using rule 60 (exp -> VERDADERO .)
    MAYOR           reduce using rule 60 (exp -> VERDADERO .)
    MENOR           reduce using rule 60 (exp -> VERDADERO .)
    IGUALIGUAL      reduce using rule 60 (exp -> VERDADERO .)
    MAYORIGUAL      reduce using rule 60 (exp -> VERDADERO .)
    MENORIGUAL      reduce using rule 60 (exp -> VERDADERO .)
    DISTINTO        reduce using rule 60 (exp -> VERDADERO .)
    ANDD            reduce using rule 60 (exp -> VERDADERO .)
    ORR             reduce using rule 60 (exp -> VERDADERO .)
    PTCOMA          reduce using rule 60 (exp -> VERDADERO .)
    DOSPT           reduce using rule 60 (exp -> VERDADERO .)
    COMA            reduce using rule 60 (exp -> VERDADERO .)
    CORDER          reduce using rule 60 (exp -> VERDADERO .)


state 34

    (61) exp -> FALSO .

    PARDER          reduce using rule 61 (exp -> FALSO .)
    MAS             reduce using rule 61 (exp -> FALSO .)
    MENOS           reduce using rule 61 (exp -> FALSO .)
    MULTIPLICACION  reduce using rule 61 (exp -> FALSO .)
    DIVISION        reduce using rule 61 (exp -> FALSO .)
    POTENCIA        reduce using rule 61 (exp -> FALSO .)
    MODULO          reduce using rule 61 (exp -> FALSO .)
    MAYOR           reduce using rule 61 (exp -> FALSO .)
    MENOR           reduce using rule 61 (exp -> FALSO .)
    IGUALIGUAL      reduce using rule 61 (exp -> FALSO .)
    MAYORIGUAL      reduce using rule 61 (exp -> FALSO .)
    MENORIGUAL      reduce using rule 61 (exp -> FALSO .)
    DISTINTO        reduce using rule 61 (exp -> FALSO .)
    ANDD            reduce using rule 61 (exp -> FALSO .)
    ORR             reduce using rule 61 (exp -> FALSO .)
    PTCOMA          reduce using rule 61 (exp -> FALSO .)
    DOSPT           reduce using rule 61 (exp -> FALSO .)
    COMA            reduce using rule 61 (exp -> FALSO .)
    CORDER          reduce using rule 61 (exp -> FALSO .)


state 35

    (62) exp -> NULO .

    PARDER          reduce using rule 62 (exp -> NULO .)
    MAS             reduce using rule 62 (exp -> NULO .)
    MENOS           reduce using rule 62 (exp -> NULO .)
    MULTIPLICACION  reduce using rule 62 (exp -> NULO .)
    DIVISION        reduce using rule 62 (exp -> NULO .)
    POTENCIA        reduce using rule 62 (exp -> NULO .)
    MODULO          reduce using rule 62 (exp -> NULO .)
    MAYOR           reduce using rule 62 (exp -> NULO .)
    MENOR           reduce using rule 62 (exp -> NULO .)
    IGUALIGUAL      reduce using rule 62 (exp -> NULO .)
    MAYORIGUAL      reduce using rule 62 (exp -> NULO .)
    MENORIGUAL      reduce using rule 62 (exp -> NULO .)
    DISTINTO        reduce using rule 62 (exp -> NULO .)
    ANDD            reduce using rule 62 (exp -> NULO .)
    ORR             reduce using rule 62 (exp -> NULO .)
    PTCOMA          reduce using rule 62 (exp -> NULO .)
    DOSPT           reduce using rule 62 (exp -> NULO .)
    COMA            reduce using rule 62 (exp -> NULO .)
    CORDER          reduce using rule 62 (exp -> NULO .)


state 36

    (63) exp -> ID .
    (64) exp -> ID . listArray
    (66) listArray -> . listArray CORIZQ exp CORDER
    (67) listArray -> . CORIZQ exp CORDER

    PARDER          reduce using rule 63 (exp -> ID .)
    MAS             reduce using rule 63 (exp -> ID .)
    MENOS           reduce using rule 63 (exp -> ID .)
    MULTIPLICACION  reduce using rule 63 (exp -> ID .)
    DIVISION        reduce using rule 63 (exp -> ID .)
    POTENCIA        reduce using rule 63 (exp -> ID .)
    MODULO          reduce using rule 63 (exp -> ID .)
    MAYOR           reduce using rule 63 (exp -> ID .)
    MENOR           reduce using rule 63 (exp -> ID .)
    IGUALIGUAL      reduce using rule 63 (exp -> ID .)
    MAYORIGUAL      reduce using rule 63 (exp -> ID .)
    MENORIGUAL      reduce using rule 63 (exp -> ID .)
    DISTINTO        reduce using rule 63 (exp -> ID .)
    ANDD            reduce using rule 63 (exp -> ID .)
    ORR             reduce using rule 63 (exp -> ID .)
    PTCOMA          reduce using rule 63 (exp -> ID .)
    DOSPT           reduce using rule 63 (exp -> ID .)
    COMA            reduce using rule 63 (exp -> ID .)
    CORDER          reduce using rule 63 (exp -> ID .)
    CORIZQ          shift and go to state 66

    listArray                      shift and go to state 65

state 37

    (65) exp -> CORIZQ . listValues CORDER
    (33) listValues -> . listValues COMA exp
    (34) listValues -> . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    listValues                     shift and go to state 67
    exp                            shift and go to state 43

state 38

    (13) p_println -> PRINTLN PARIZQ exp . PARDER PTCOMA
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          shift and go to state 68
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 39

    (14) declaration -> ID IGUAL exp . PTCOMA
    (15) declaration -> ID IGUAL exp . DOSPT DOSPT typeDef PTCOMA
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PTCOMA          shift and go to state 69
    DOSPT           shift and go to state 70
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 40

    (19) callFuncSt -> ID parametersCallFunc PTCOMA .

    PRINT           reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    PRINTLN         reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    ID              reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    FUNCTION        reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    RWHILE          reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    RIF             reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    $end            reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    LLAVEDER        reduce using rule 19 (callFuncSt -> ID parametersCallFunc PTCOMA .)


state 41

    (23) parametersCallFunc -> PARIZQ listValues . PARDER
    (33) listValues -> listValues . COMA exp

    PARDER          shift and go to state 71
    COMA            shift and go to state 72


state 42

    (24) parametersCallFunc -> PARIZQ PARDER .

    PTCOMA          reduce using rule 24 (parametersCallFunc -> PARIZQ PARDER .)


state 43

    (34) listValues -> exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 34 (listValues -> exp .)
    COMA            reduce using rule 34 (listValues -> exp .)
    CORDER          reduce using rule 34 (listValues -> exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 44

    (16) function -> FUNCTION ID parametersFunc . DOSPT typeDef block

    DOSPT           shift and go to state 73


state 45

    (17) parametersFunc -> PARIZQ . parameters PARDER
    (18) parametersFunc -> PARIZQ . PARDER
    (20) parameters -> . parameters COMA parameter
    (21) parameters -> . parameter
    (22) parameter -> . ID DOSPT typeDef

    PARDER          shift and go to state 75
    ID              shift and go to state 77

    parameters                     shift and go to state 74
    parameter                      shift and go to state 76

state 46

    (27) whileSt -> RWHILE PARIZQ exp . PARDER block
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          shift and go to state 78
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 47

    (28) ifSt -> RIF PARIZQ exp . PARDER block elseSt
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          shift and go to state 79
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 48

    (55) exp -> PARIZQ exp . PARDER
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          shift and go to state 80
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 49

    (12) p_print -> PRINT PARIZQ exp PARDER . PTCOMA

    PTCOMA          shift and go to state 81


state 50

    (40) exp -> exp MAS . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 82

state 51

    (41) exp -> exp MENOS . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 83

state 52

    (42) exp -> exp MULTIPLICACION . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 84

state 53

    (43) exp -> exp DIVISION . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 85

state 54

    (44) exp -> exp POTENCIA . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 86

state 55

    (45) exp -> exp MODULO . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 87

state 56

    (46) exp -> exp MAYOR . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 88

state 57

    (47) exp -> exp MENOR . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 89

state 58

    (48) exp -> exp IGUALIGUAL . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 90

state 59

    (49) exp -> exp MAYORIGUAL . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 91

state 60

    (50) exp -> exp MENORIGUAL . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 92

state 61

    (51) exp -> exp DISTINTO . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 93

state 62

    (52) exp -> exp ANDD . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 94

state 63

    (53) exp -> exp ORR . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 95

state 64

    (54) exp -> NOTT exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 54 (exp -> NOTT exp .)
    IGUALIGUAL      reduce using rule 54 (exp -> NOTT exp .)
    ANDD            reduce using rule 54 (exp -> NOTT exp .)
    ORR             reduce using rule 54 (exp -> NOTT exp .)
    PTCOMA          reduce using rule 54 (exp -> NOTT exp .)
    DOSPT           reduce using rule 54 (exp -> NOTT exp .)
    COMA            reduce using rule 54 (exp -> NOTT exp .)
    CORDER          reduce using rule 54 (exp -> NOTT exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61

  ! MAS             [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MENOS           [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MULTIPLICACION  [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! DIVISION        [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! POTENCIA        [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MODULO          [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MAYOR           [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MENOR           [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MAYORIGUAL      [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! MENORIGUAL      [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! DISTINTO        [ reduce using rule 54 (exp -> NOTT exp .) ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 65

    (64) exp -> ID listArray .
    (66) listArray -> listArray . CORIZQ exp CORDER

    PARDER          reduce using rule 64 (exp -> ID listArray .)
    MAS             reduce using rule 64 (exp -> ID listArray .)
    MENOS           reduce using rule 64 (exp -> ID listArray .)
    MULTIPLICACION  reduce using rule 64 (exp -> ID listArray .)
    DIVISION        reduce using rule 64 (exp -> ID listArray .)
    POTENCIA        reduce using rule 64 (exp -> ID listArray .)
    MODULO          reduce using rule 64 (exp -> ID listArray .)
    MAYOR           reduce using rule 64 (exp -> ID listArray .)
    MENOR           reduce using rule 64 (exp -> ID listArray .)
    IGUALIGUAL      reduce using rule 64 (exp -> ID listArray .)
    MAYORIGUAL      reduce using rule 64 (exp -> ID listArray .)
    MENORIGUAL      reduce using rule 64 (exp -> ID listArray .)
    DISTINTO        reduce using rule 64 (exp -> ID listArray .)
    ANDD            reduce using rule 64 (exp -> ID listArray .)
    ORR             reduce using rule 64 (exp -> ID listArray .)
    PTCOMA          reduce using rule 64 (exp -> ID listArray .)
    DOSPT           reduce using rule 64 (exp -> ID listArray .)
    COMA            reduce using rule 64 (exp -> ID listArray .)
    CORDER          reduce using rule 64 (exp -> ID listArray .)
    CORIZQ          shift and go to state 96


state 66

    (67) listArray -> CORIZQ . exp CORDER
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 97

state 67

    (65) exp -> CORIZQ listValues . CORDER
    (33) listValues -> listValues . COMA exp

    CORDER          shift and go to state 98
    COMA            shift and go to state 72


state 68

    (13) p_println -> PRINTLN PARIZQ exp PARDER . PTCOMA

    PTCOMA          shift and go to state 99


state 69

    (14) declaration -> ID IGUAL exp PTCOMA .

    PRINT           reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    PRINTLN         reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    ID              reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    FUNCTION        reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    RWHILE          reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    RIF             reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    $end            reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)
    LLAVEDER        reduce using rule 14 (declaration -> ID IGUAL exp PTCOMA .)


state 70

    (15) declaration -> ID IGUAL exp DOSPT . DOSPT typeDef PTCOMA

    DOSPT           shift and go to state 100


state 71

    (23) parametersCallFunc -> PARIZQ listValues PARDER .

    PTCOMA          reduce using rule 23 (parametersCallFunc -> PARIZQ listValues PARDER .)


state 72

    (33) listValues -> listValues COMA . exp
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 101

state 73

    (16) function -> FUNCTION ID parametersFunc DOSPT . typeDef block
    (35) typeDef -> . RINT
    (36) typeDef -> . RFLOAT
    (37) typeDef -> . RSTRING
    (38) typeDef -> . RCHAR
    (39) typeDef -> . RBOOL

    RINT            shift and go to state 103
    RFLOAT          shift and go to state 104
    RSTRING         shift and go to state 105
    RCHAR           shift and go to state 106
    RBOOL           shift and go to state 107

    typeDef                        shift and go to state 102

state 74

    (17) parametersFunc -> PARIZQ parameters . PARDER
    (20) parameters -> parameters . COMA parameter

    PARDER          shift and go to state 108
    COMA            shift and go to state 109


state 75

    (18) parametersFunc -> PARIZQ PARDER .

    DOSPT           reduce using rule 18 (parametersFunc -> PARIZQ PARDER .)


state 76

    (21) parameters -> parameter .

    PARDER          reduce using rule 21 (parameters -> parameter .)
    COMA            reduce using rule 21 (parameters -> parameter .)


state 77

    (22) parameter -> ID . DOSPT typeDef

    DOSPT           shift and go to state 110


state 78

    (27) whileSt -> RWHILE PARIZQ exp PARDER . block
    (25) block -> . LLAVEIZQ instructions LLAVEDER
    (26) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 112

    block                          shift and go to state 111

state 79

    (28) ifSt -> RIF PARIZQ exp PARDER . block elseSt
    (25) block -> . LLAVEIZQ instructions LLAVEDER
    (26) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 112

    block                          shift and go to state 113

state 80

    (55) exp -> PARIZQ exp PARDER .

    PARDER          reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MAS             reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MENOS           reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MULTIPLICACION  reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    DIVISION        reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    POTENCIA        reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MODULO          reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MAYOR           reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MENOR           reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    IGUALIGUAL      reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MAYORIGUAL      reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    MENORIGUAL      reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    DISTINTO        reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    ANDD            reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    ORR             reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    PTCOMA          reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    DOSPT           reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    COMA            reduce using rule 55 (exp -> PARIZQ exp PARDER .)
    CORDER          reduce using rule 55 (exp -> PARIZQ exp PARDER .)


state 81

    (12) p_print -> PRINT PARIZQ exp PARDER PTCOMA .

    PRINT           reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    PRINTLN         reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    ID              reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    FUNCTION        reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    RWHILE          reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    RIF             reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    $end            reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    LLAVEDER        reduce using rule 12 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)


state 82

    (40) exp -> exp MAS exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 40 (exp -> exp MAS exp .)
    MAS             reduce using rule 40 (exp -> exp MAS exp .)
    MENOS           reduce using rule 40 (exp -> exp MAS exp .)
    MAYOR           reduce using rule 40 (exp -> exp MAS exp .)
    MENOR           reduce using rule 40 (exp -> exp MAS exp .)
    IGUALIGUAL      reduce using rule 40 (exp -> exp MAS exp .)
    MAYORIGUAL      reduce using rule 40 (exp -> exp MAS exp .)
    MENORIGUAL      reduce using rule 40 (exp -> exp MAS exp .)
    DISTINTO        reduce using rule 40 (exp -> exp MAS exp .)
    ANDD            reduce using rule 40 (exp -> exp MAS exp .)
    ORR             reduce using rule 40 (exp -> exp MAS exp .)
    PTCOMA          reduce using rule 40 (exp -> exp MAS exp .)
    DOSPT           reduce using rule 40 (exp -> exp MAS exp .)
    COMA            reduce using rule 40 (exp -> exp MAS exp .)
    CORDER          reduce using rule 40 (exp -> exp MAS exp .)
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55

  ! MULTIPLICACION  [ reduce using rule 40 (exp -> exp MAS exp .) ]
  ! DIVISION        [ reduce using rule 40 (exp -> exp MAS exp .) ]
  ! POTENCIA        [ reduce using rule 40 (exp -> exp MAS exp .) ]
  ! MODULO          [ reduce using rule 40 (exp -> exp MAS exp .) ]
  ! MAS             [ shift and go to state 50 ]
  ! MENOS           [ shift and go to state 51 ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 83

    (41) exp -> exp MENOS exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 41 (exp -> exp MENOS exp .)
    MAS             reduce using rule 41 (exp -> exp MENOS exp .)
    MENOS           reduce using rule 41 (exp -> exp MENOS exp .)
    MAYOR           reduce using rule 41 (exp -> exp MENOS exp .)
    MENOR           reduce using rule 41 (exp -> exp MENOS exp .)
    IGUALIGUAL      reduce using rule 41 (exp -> exp MENOS exp .)
    MAYORIGUAL      reduce using rule 41 (exp -> exp MENOS exp .)
    MENORIGUAL      reduce using rule 41 (exp -> exp MENOS exp .)
    DISTINTO        reduce using rule 41 (exp -> exp MENOS exp .)
    ANDD            reduce using rule 41 (exp -> exp MENOS exp .)
    ORR             reduce using rule 41 (exp -> exp MENOS exp .)
    PTCOMA          reduce using rule 41 (exp -> exp MENOS exp .)
    DOSPT           reduce using rule 41 (exp -> exp MENOS exp .)
    COMA            reduce using rule 41 (exp -> exp MENOS exp .)
    CORDER          reduce using rule 41 (exp -> exp MENOS exp .)
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55

  ! MULTIPLICACION  [ reduce using rule 41 (exp -> exp MENOS exp .) ]
  ! DIVISION        [ reduce using rule 41 (exp -> exp MENOS exp .) ]
  ! POTENCIA        [ reduce using rule 41 (exp -> exp MENOS exp .) ]
  ! MODULO          [ reduce using rule 41 (exp -> exp MENOS exp .) ]
  ! MAS             [ shift and go to state 50 ]
  ! MENOS           [ shift and go to state 51 ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 84

    (42) exp -> exp MULTIPLICACION exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MAS             reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MENOS           reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MULTIPLICACION  reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    DIVISION        reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MODULO          reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MAYOR           reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MENOR           reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    IGUALIGUAL      reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MAYORIGUAL      reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    MENORIGUAL      reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    DISTINTO        reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    ANDD            reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    ORR             reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    PTCOMA          reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    DOSPT           reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    COMA            reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    CORDER          reduce using rule 42 (exp -> exp MULTIPLICACION exp .)
    POTENCIA        shift and go to state 54

  ! POTENCIA        [ reduce using rule 42 (exp -> exp MULTIPLICACION exp .) ]
  ! MAS             [ shift and go to state 50 ]
  ! MENOS           [ shift and go to state 51 ]
  ! MULTIPLICACION  [ shift and go to state 52 ]
  ! DIVISION        [ shift and go to state 53 ]
  ! MODULO          [ shift and go to state 55 ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 85

    (43) exp -> exp DIVISION exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 43 (exp -> exp DIVISION exp .)
    MAS             reduce using rule 43 (exp -> exp DIVISION exp .)
    MENOS           reduce using rule 43 (exp -> exp DIVISION exp .)
    MULTIPLICACION  reduce using rule 43 (exp -> exp DIVISION exp .)
    DIVISION        reduce using rule 43 (exp -> exp DIVISION exp .)
    MODULO          reduce using rule 43 (exp -> exp DIVISION exp .)
    MAYOR           reduce using rule 43 (exp -> exp DIVISION exp .)
    MENOR           reduce using rule 43 (exp -> exp DIVISION exp .)
    IGUALIGUAL      reduce using rule 43 (exp -> exp DIVISION exp .)
    MAYORIGUAL      reduce using rule 43 (exp -> exp DIVISION exp .)
    MENORIGUAL      reduce using rule 43 (exp -> exp DIVISION exp .)
    DISTINTO        reduce using rule 43 (exp -> exp DIVISION exp .)
    ANDD            reduce using rule 43 (exp -> exp DIVISION exp .)
    ORR             reduce using rule 43 (exp -> exp DIVISION exp .)
    PTCOMA          reduce using rule 43 (exp -> exp DIVISION exp .)
    DOSPT           reduce using rule 43 (exp -> exp DIVISION exp .)
    COMA            reduce using rule 43 (exp -> exp DIVISION exp .)
    CORDER          reduce using rule 43 (exp -> exp DIVISION exp .)
    POTENCIA        shift and go to state 54

  ! POTENCIA        [ reduce using rule 43 (exp -> exp DIVISION exp .) ]
  ! MAS             [ shift and go to state 50 ]
  ! MENOS           [ shift and go to state 51 ]
  ! MULTIPLICACION  [ shift and go to state 52 ]
  ! DIVISION        [ shift and go to state 53 ]
  ! MODULO          [ shift and go to state 55 ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 86

    (44) exp -> exp POTENCIA exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 44 (exp -> exp POTENCIA exp .)
    MAS             reduce using rule 44 (exp -> exp POTENCIA exp .)
    MENOS           reduce using rule 44 (exp -> exp POTENCIA exp .)
    MULTIPLICACION  reduce using rule 44 (exp -> exp POTENCIA exp .)
    DIVISION        reduce using rule 44 (exp -> exp POTENCIA exp .)
    POTENCIA        reduce using rule 44 (exp -> exp POTENCIA exp .)
    MODULO          reduce using rule 44 (exp -> exp POTENCIA exp .)
    MAYOR           reduce using rule 44 (exp -> exp POTENCIA exp .)
    MENOR           reduce using rule 44 (exp -> exp POTENCIA exp .)
    IGUALIGUAL      reduce using rule 44 (exp -> exp POTENCIA exp .)
    MAYORIGUAL      reduce using rule 44 (exp -> exp POTENCIA exp .)
    MENORIGUAL      reduce using rule 44 (exp -> exp POTENCIA exp .)
    DISTINTO        reduce using rule 44 (exp -> exp POTENCIA exp .)
    ANDD            reduce using rule 44 (exp -> exp POTENCIA exp .)
    ORR             reduce using rule 44 (exp -> exp POTENCIA exp .)
    PTCOMA          reduce using rule 44 (exp -> exp POTENCIA exp .)
    DOSPT           reduce using rule 44 (exp -> exp POTENCIA exp .)
    COMA            reduce using rule 44 (exp -> exp POTENCIA exp .)
    CORDER          reduce using rule 44 (exp -> exp POTENCIA exp .)

  ! MAS             [ shift and go to state 50 ]
  ! MENOS           [ shift and go to state 51 ]
  ! MULTIPLICACION  [ shift and go to state 52 ]
  ! DIVISION        [ shift and go to state 53 ]
  ! POTENCIA        [ shift and go to state 54 ]
  ! MODULO          [ shift and go to state 55 ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 87

    (45) exp -> exp MODULO exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 45 (exp -> exp MODULO exp .)
    MAS             reduce using rule 45 (exp -> exp MODULO exp .)
    MENOS           reduce using rule 45 (exp -> exp MODULO exp .)
    MULTIPLICACION  reduce using rule 45 (exp -> exp MODULO exp .)
    DIVISION        reduce using rule 45 (exp -> exp MODULO exp .)
    MODULO          reduce using rule 45 (exp -> exp MODULO exp .)
    MAYOR           reduce using rule 45 (exp -> exp MODULO exp .)
    MENOR           reduce using rule 45 (exp -> exp MODULO exp .)
    IGUALIGUAL      reduce using rule 45 (exp -> exp MODULO exp .)
    MAYORIGUAL      reduce using rule 45 (exp -> exp MODULO exp .)
    MENORIGUAL      reduce using rule 45 (exp -> exp MODULO exp .)
    DISTINTO        reduce using rule 45 (exp -> exp MODULO exp .)
    ANDD            reduce using rule 45 (exp -> exp MODULO exp .)
    ORR             reduce using rule 45 (exp -> exp MODULO exp .)
    PTCOMA          reduce using rule 45 (exp -> exp MODULO exp .)
    DOSPT           reduce using rule 45 (exp -> exp MODULO exp .)
    COMA            reduce using rule 45 (exp -> exp MODULO exp .)
    CORDER          reduce using rule 45 (exp -> exp MODULO exp .)
    POTENCIA        shift and go to state 54

  ! POTENCIA        [ reduce using rule 45 (exp -> exp MODULO exp .) ]
  ! MAS             [ shift and go to state 50 ]
  ! MENOS           [ shift and go to state 51 ]
  ! MULTIPLICACION  [ shift and go to state 52 ]
  ! DIVISION        [ shift and go to state 53 ]
  ! MODULO          [ shift and go to state 55 ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 88

    (46) exp -> exp MAYOR exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 46 (exp -> exp MAYOR exp .)
    MAYOR           reduce using rule 46 (exp -> exp MAYOR exp .)
    MENOR           reduce using rule 46 (exp -> exp MAYOR exp .)
    IGUALIGUAL      reduce using rule 46 (exp -> exp MAYOR exp .)
    MAYORIGUAL      reduce using rule 46 (exp -> exp MAYOR exp .)
    MENORIGUAL      reduce using rule 46 (exp -> exp MAYOR exp .)
    DISTINTO        reduce using rule 46 (exp -> exp MAYOR exp .)
    ANDD            reduce using rule 46 (exp -> exp MAYOR exp .)
    ORR             reduce using rule 46 (exp -> exp MAYOR exp .)
    PTCOMA          reduce using rule 46 (exp -> exp MAYOR exp .)
    DOSPT           reduce using rule 46 (exp -> exp MAYOR exp .)
    COMA            reduce using rule 46 (exp -> exp MAYOR exp .)
    CORDER          reduce using rule 46 (exp -> exp MAYOR exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55

  ! MAS             [ reduce using rule 46 (exp -> exp MAYOR exp .) ]
  ! MENOS           [ reduce using rule 46 (exp -> exp MAYOR exp .) ]
  ! MULTIPLICACION  [ reduce using rule 46 (exp -> exp MAYOR exp .) ]
  ! DIVISION        [ reduce using rule 46 (exp -> exp MAYOR exp .) ]
  ! POTENCIA        [ reduce using rule 46 (exp -> exp MAYOR exp .) ]
  ! MODULO          [ reduce using rule 46 (exp -> exp MAYOR exp .) ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 89

    (47) exp -> exp MENOR exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 47 (exp -> exp MENOR exp .)
    MAYOR           reduce using rule 47 (exp -> exp MENOR exp .)
    MENOR           reduce using rule 47 (exp -> exp MENOR exp .)
    IGUALIGUAL      reduce using rule 47 (exp -> exp MENOR exp .)
    MAYORIGUAL      reduce using rule 47 (exp -> exp MENOR exp .)
    MENORIGUAL      reduce using rule 47 (exp -> exp MENOR exp .)
    DISTINTO        reduce using rule 47 (exp -> exp MENOR exp .)
    ANDD            reduce using rule 47 (exp -> exp MENOR exp .)
    ORR             reduce using rule 47 (exp -> exp MENOR exp .)
    PTCOMA          reduce using rule 47 (exp -> exp MENOR exp .)
    DOSPT           reduce using rule 47 (exp -> exp MENOR exp .)
    COMA            reduce using rule 47 (exp -> exp MENOR exp .)
    CORDER          reduce using rule 47 (exp -> exp MENOR exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55

  ! MAS             [ reduce using rule 47 (exp -> exp MENOR exp .) ]
  ! MENOS           [ reduce using rule 47 (exp -> exp MENOR exp .) ]
  ! MULTIPLICACION  [ reduce using rule 47 (exp -> exp MENOR exp .) ]
  ! DIVISION        [ reduce using rule 47 (exp -> exp MENOR exp .) ]
  ! POTENCIA        [ reduce using rule 47 (exp -> exp MENOR exp .) ]
  ! MODULO          [ reduce using rule 47 (exp -> exp MENOR exp .) ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 90

    (48) exp -> exp IGUALIGUAL exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for IGUALIGUAL resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for DISTINTO resolved as shift
  ! shift/reduce conflict for ANDD resolved as shift
  ! shift/reduce conflict for ORR resolved as shift
    PARDER          reduce using rule 48 (exp -> exp IGUALIGUAL exp .)
    PTCOMA          reduce using rule 48 (exp -> exp IGUALIGUAL exp .)
    DOSPT           reduce using rule 48 (exp -> exp IGUALIGUAL exp .)
    COMA            reduce using rule 48 (exp -> exp IGUALIGUAL exp .)
    CORDER          reduce using rule 48 (exp -> exp IGUALIGUAL exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63

  ! MAS             [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MENOS           [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MULTIPLICACION  [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! DIVISION        [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! POTENCIA        [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MODULO          [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MAYOR           [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MENOR           [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! IGUALIGUAL      [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MAYORIGUAL      [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! MENORIGUAL      [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! DISTINTO        [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! ANDD            [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]
  ! ORR             [ reduce using rule 48 (exp -> exp IGUALIGUAL exp .) ]


state 91

    (49) exp -> exp MAYORIGUAL exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    MAYOR           reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    MENOR           reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    IGUALIGUAL      reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    MAYORIGUAL      reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    MENORIGUAL      reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    DISTINTO        reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    ANDD            reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    ORR             reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    PTCOMA          reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    DOSPT           reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    COMA            reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    CORDER          reduce using rule 49 (exp -> exp MAYORIGUAL exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55

  ! MAS             [ reduce using rule 49 (exp -> exp MAYORIGUAL exp .) ]
  ! MENOS           [ reduce using rule 49 (exp -> exp MAYORIGUAL exp .) ]
  ! MULTIPLICACION  [ reduce using rule 49 (exp -> exp MAYORIGUAL exp .) ]
  ! DIVISION        [ reduce using rule 49 (exp -> exp MAYORIGUAL exp .) ]
  ! POTENCIA        [ reduce using rule 49 (exp -> exp MAYORIGUAL exp .) ]
  ! MODULO          [ reduce using rule 49 (exp -> exp MAYORIGUAL exp .) ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 92

    (50) exp -> exp MENORIGUAL exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MAYOR           reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MENOR           reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    IGUALIGUAL      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MAYORIGUAL      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MENORIGUAL      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    DISTINTO        reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    ANDD            reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    ORR             reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    PTCOMA          reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    DOSPT           reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    COMA            reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    CORDER          reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55

  ! MAS             [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MENOS           [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MULTIPLICACION  [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! DIVISION        [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! POTENCIA        [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MODULO          [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MAYOR           [ shift and go to state 56 ]
  ! MENOR           [ shift and go to state 57 ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! MAYORIGUAL      [ shift and go to state 59 ]
  ! MENORIGUAL      [ shift and go to state 60 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 93

    (51) exp -> exp DISTINTO exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 51 (exp -> exp DISTINTO exp .)
    IGUALIGUAL      reduce using rule 51 (exp -> exp DISTINTO exp .)
    DISTINTO        reduce using rule 51 (exp -> exp DISTINTO exp .)
    ANDD            reduce using rule 51 (exp -> exp DISTINTO exp .)
    ORR             reduce using rule 51 (exp -> exp DISTINTO exp .)
    PTCOMA          reduce using rule 51 (exp -> exp DISTINTO exp .)
    DOSPT           reduce using rule 51 (exp -> exp DISTINTO exp .)
    COMA            reduce using rule 51 (exp -> exp DISTINTO exp .)
    CORDER          reduce using rule 51 (exp -> exp DISTINTO exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60

  ! MAS             [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MENOS           [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MULTIPLICACION  [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! DIVISION        [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! POTENCIA        [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MODULO          [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MAYOR           [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MENOR           [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MAYORIGUAL      [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! MENORIGUAL      [ reduce using rule 51 (exp -> exp DISTINTO exp .) ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! DISTINTO        [ shift and go to state 61 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 94

    (52) exp -> exp ANDD exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 52 (exp -> exp ANDD exp .)
    IGUALIGUAL      reduce using rule 52 (exp -> exp ANDD exp .)
    ANDD            reduce using rule 52 (exp -> exp ANDD exp .)
    PTCOMA          reduce using rule 52 (exp -> exp ANDD exp .)
    DOSPT           reduce using rule 52 (exp -> exp ANDD exp .)
    COMA            reduce using rule 52 (exp -> exp ANDD exp .)
    CORDER          reduce using rule 52 (exp -> exp ANDD exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ORR             shift and go to state 63

  ! MAS             [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MENOS           [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MULTIPLICACION  [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! DIVISION        [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! POTENCIA        [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MODULO          [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MAYOR           [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MENOR           [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MAYORIGUAL      [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! MENORIGUAL      [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! DISTINTO        [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! ORR             [ reduce using rule 52 (exp -> exp ANDD exp .) ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! ANDD            [ shift and go to state 62 ]


state 95

    (53) exp -> exp ORR exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 53 (exp -> exp ORR exp .)
    IGUALIGUAL      reduce using rule 53 (exp -> exp ORR exp .)
    ANDD            reduce using rule 53 (exp -> exp ORR exp .)
    ORR             reduce using rule 53 (exp -> exp ORR exp .)
    PTCOMA          reduce using rule 53 (exp -> exp ORR exp .)
    DOSPT           reduce using rule 53 (exp -> exp ORR exp .)
    COMA            reduce using rule 53 (exp -> exp ORR exp .)
    CORDER          reduce using rule 53 (exp -> exp ORR exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61

  ! MAS             [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MENOS           [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MULTIPLICACION  [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! DIVISION        [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! POTENCIA        [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MODULO          [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MAYOR           [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MENOR           [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! MENORIGUAL      [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! DISTINTO        [ reduce using rule 53 (exp -> exp ORR exp .) ]
  ! IGUALIGUAL      [ shift and go to state 58 ]
  ! ANDD            [ shift and go to state 62 ]
  ! ORR             [ shift and go to state 63 ]


state 96

    (66) listArray -> listArray CORIZQ . exp CORDER
    (40) exp -> . exp MAS exp
    (41) exp -> . exp MENOS exp
    (42) exp -> . exp MULTIPLICACION exp
    (43) exp -> . exp DIVISION exp
    (44) exp -> . exp POTENCIA exp
    (45) exp -> . exp MODULO exp
    (46) exp -> . exp MAYOR exp
    (47) exp -> . exp MENOR exp
    (48) exp -> . exp IGUALIGUAL exp
    (49) exp -> . exp MAYORIGUAL exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp DISTINTO exp
    (52) exp -> . exp ANDD exp
    (53) exp -> . exp ORR exp
    (54) exp -> . NOTT exp
    (55) exp -> . PARIZQ exp PARDER
    (56) exp -> . ENTERO
    (57) exp -> . DECIMAL
    (58) exp -> . STRING
    (59) exp -> . CHAR
    (60) exp -> . VERDADERO
    (61) exp -> . FALSO
    (62) exp -> . NULO
    (63) exp -> . ID
    (64) exp -> . ID listArray
    (65) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 28
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 29
    DECIMAL         shift and go to state 30
    STRING          shift and go to state 31
    CHAR            shift and go to state 32
    VERDADERO       shift and go to state 33
    FALSO           shift and go to state 34
    NULO            shift and go to state 35
    ID              shift and go to state 36
    CORIZQ          shift and go to state 37

    exp                            shift and go to state 114

state 97

    (67) listArray -> CORIZQ exp . CORDER
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    CORDER          shift and go to state 115
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 98

    (65) exp -> CORIZQ listValues CORDER .

    PARDER          reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MAS             reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MENOS           reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MULTIPLICACION  reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    DIVISION        reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    POTENCIA        reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MODULO          reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MAYOR           reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MENOR           reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    IGUALIGUAL      reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MAYORIGUAL      reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    MENORIGUAL      reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    DISTINTO        reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    ANDD            reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    ORR             reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    PTCOMA          reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    DOSPT           reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    COMA            reduce using rule 65 (exp -> CORIZQ listValues CORDER .)
    CORDER          reduce using rule 65 (exp -> CORIZQ listValues CORDER .)


state 99

    (13) p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .

    PRINT           reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    PRINTLN         reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    ID              reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    FUNCTION        reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    RWHILE          reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    RIF             reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    $end            reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    LLAVEDER        reduce using rule 13 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)


state 100

    (15) declaration -> ID IGUAL exp DOSPT DOSPT . typeDef PTCOMA
    (35) typeDef -> . RINT
    (36) typeDef -> . RFLOAT
    (37) typeDef -> . RSTRING
    (38) typeDef -> . RCHAR
    (39) typeDef -> . RBOOL

    RINT            shift and go to state 103
    RFLOAT          shift and go to state 104
    RSTRING         shift and go to state 105
    RCHAR           shift and go to state 106
    RBOOL           shift and go to state 107

    typeDef                        shift and go to state 116

state 101

    (33) listValues -> listValues COMA exp .
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    PARDER          reduce using rule 33 (listValues -> listValues COMA exp .)
    COMA            reduce using rule 33 (listValues -> listValues COMA exp .)
    CORDER          reduce using rule 33 (listValues -> listValues COMA exp .)
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 102

    (16) function -> FUNCTION ID parametersFunc DOSPT typeDef . block
    (25) block -> . LLAVEIZQ instructions LLAVEDER
    (26) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 112

    block                          shift and go to state 117

state 103

    (35) typeDef -> RINT .

    LLAVEIZQ        reduce using rule 35 (typeDef -> RINT .)
    PTCOMA          reduce using rule 35 (typeDef -> RINT .)
    PARDER          reduce using rule 35 (typeDef -> RINT .)
    COMA            reduce using rule 35 (typeDef -> RINT .)


state 104

    (36) typeDef -> RFLOAT .

    LLAVEIZQ        reduce using rule 36 (typeDef -> RFLOAT .)
    PTCOMA          reduce using rule 36 (typeDef -> RFLOAT .)
    PARDER          reduce using rule 36 (typeDef -> RFLOAT .)
    COMA            reduce using rule 36 (typeDef -> RFLOAT .)


state 105

    (37) typeDef -> RSTRING .

    LLAVEIZQ        reduce using rule 37 (typeDef -> RSTRING .)
    PTCOMA          reduce using rule 37 (typeDef -> RSTRING .)
    PARDER          reduce using rule 37 (typeDef -> RSTRING .)
    COMA            reduce using rule 37 (typeDef -> RSTRING .)


state 106

    (38) typeDef -> RCHAR .

    LLAVEIZQ        reduce using rule 38 (typeDef -> RCHAR .)
    PTCOMA          reduce using rule 38 (typeDef -> RCHAR .)
    PARDER          reduce using rule 38 (typeDef -> RCHAR .)
    COMA            reduce using rule 38 (typeDef -> RCHAR .)


state 107

    (39) typeDef -> RBOOL .

    LLAVEIZQ        reduce using rule 39 (typeDef -> RBOOL .)
    PTCOMA          reduce using rule 39 (typeDef -> RBOOL .)
    PARDER          reduce using rule 39 (typeDef -> RBOOL .)
    COMA            reduce using rule 39 (typeDef -> RBOOL .)


state 108

    (17) parametersFunc -> PARIZQ parameters PARDER .

    DOSPT           reduce using rule 17 (parametersFunc -> PARIZQ parameters PARDER .)


state 109

    (20) parameters -> parameters COMA . parameter
    (22) parameter -> . ID DOSPT typeDef

    ID              shift and go to state 77

    parameter                      shift and go to state 118

state 110

    (22) parameter -> ID DOSPT . typeDef
    (35) typeDef -> . RINT
    (36) typeDef -> . RFLOAT
    (37) typeDef -> . RSTRING
    (38) typeDef -> . RCHAR
    (39) typeDef -> . RBOOL

    RINT            shift and go to state 103
    RFLOAT          shift and go to state 104
    RSTRING         shift and go to state 105
    RCHAR           shift and go to state 106
    RBOOL           shift and go to state 107

    typeDef                        shift and go to state 119

state 111

    (27) whileSt -> RWHILE PARIZQ exp PARDER block .

    PRINT           reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    PRINTLN         reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    ID              reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    FUNCTION        reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    RWHILE          reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    RIF             reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    $end            reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    LLAVEDER        reduce using rule 27 (whileSt -> RWHILE PARIZQ exp PARDER block .)


state 112

    (25) block -> LLAVEIZQ . instructions LLAVEDER
    (26) block -> LLAVEIZQ . LLAVEDER
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . function
    (8) instruction -> . callFuncSt
    (9) instruction -> . whileSt
    (10) instruction -> . ifSt
    (12) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (13) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (14) declaration -> . ID IGUAL exp PTCOMA
    (15) declaration -> . ID IGUAL exp DOSPT DOSPT typeDef PTCOMA
    (16) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (19) callFuncSt -> . ID parametersCallFunc PTCOMA
    (27) whileSt -> . RWHILE PARIZQ exp PARDER block
    (28) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    LLAVEDER        shift and go to state 121
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    FUNCTION        shift and go to state 14
    RWHILE          shift and go to state 15
    RIF             shift and go to state 16

    instructions                   shift and go to state 120
    instruction                    shift and go to state 3
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    function                       shift and go to state 7
    callFuncSt                     shift and go to state 8
    whileSt                        shift and go to state 9
    ifSt                           shift and go to state 10

state 113

    (28) ifSt -> RIF PARIZQ exp PARDER block . elseSt
    (29) elseSt -> . RELSE block
    (30) elseSt -> . ifSt
    (28) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    RELSE           shift and go to state 123
    RIF             shift and go to state 16

    elseSt                         shift and go to state 122
    ifSt                           shift and go to state 124

state 114

    (66) listArray -> listArray CORIZQ exp . CORDER
    (40) exp -> exp . MAS exp
    (41) exp -> exp . MENOS exp
    (42) exp -> exp . MULTIPLICACION exp
    (43) exp -> exp . DIVISION exp
    (44) exp -> exp . POTENCIA exp
    (45) exp -> exp . MODULO exp
    (46) exp -> exp . MAYOR exp
    (47) exp -> exp . MENOR exp
    (48) exp -> exp . IGUALIGUAL exp
    (49) exp -> exp . MAYORIGUAL exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . DISTINTO exp
    (52) exp -> exp . ANDD exp
    (53) exp -> exp . ORR exp

    CORDER          shift and go to state 125
    MAS             shift and go to state 50
    MENOS           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    POTENCIA        shift and go to state 54
    MODULO          shift and go to state 55
    MAYOR           shift and go to state 56
    MENOR           shift and go to state 57
    IGUALIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59
    MENORIGUAL      shift and go to state 60
    DISTINTO        shift and go to state 61
    ANDD            shift and go to state 62
    ORR             shift and go to state 63


state 115

    (67) listArray -> CORIZQ exp CORDER .

    CORIZQ          reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    PARDER          reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MAS             reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MENOS           reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MULTIPLICACION  reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    DIVISION        reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    POTENCIA        reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MODULO          reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MAYOR           reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MENOR           reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    IGUALIGUAL      reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MAYORIGUAL      reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    MENORIGUAL      reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    DISTINTO        reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    ANDD            reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    ORR             reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    PTCOMA          reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    DOSPT           reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    COMA            reduce using rule 67 (listArray -> CORIZQ exp CORDER .)
    CORDER          reduce using rule 67 (listArray -> CORIZQ exp CORDER .)


state 116

    (15) declaration -> ID IGUAL exp DOSPT DOSPT typeDef . PTCOMA

    PTCOMA          shift and go to state 126


state 117

    (16) function -> FUNCTION ID parametersFunc DOSPT typeDef block .

    PRINT           reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    PRINTLN         reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    ID              reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    FUNCTION        reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    RWHILE          reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    RIF             reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    $end            reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    LLAVEDER        reduce using rule 16 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)


state 118

    (20) parameters -> parameters COMA parameter .

    PARDER          reduce using rule 20 (parameters -> parameters COMA parameter .)
    COMA            reduce using rule 20 (parameters -> parameters COMA parameter .)


state 119

    (22) parameter -> ID DOSPT typeDef .

    PARDER          reduce using rule 22 (parameter -> ID DOSPT typeDef .)
    COMA            reduce using rule 22 (parameter -> ID DOSPT typeDef .)


state 120

    (25) block -> LLAVEIZQ instructions . LLAVEDER
    (2) instructions -> instructions . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . function
    (8) instruction -> . callFuncSt
    (9) instruction -> . whileSt
    (10) instruction -> . ifSt
    (12) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (13) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (14) declaration -> . ID IGUAL exp PTCOMA
    (15) declaration -> . ID IGUAL exp DOSPT DOSPT typeDef PTCOMA
    (16) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (19) callFuncSt -> . ID parametersCallFunc PTCOMA
    (27) whileSt -> . RWHILE PARIZQ exp PARDER block
    (28) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    LLAVEDER        shift and go to state 127
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    FUNCTION        shift and go to state 14
    RWHILE          shift and go to state 15
    RIF             shift and go to state 16

    instruction                    shift and go to state 17
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    function                       shift and go to state 7
    callFuncSt                     shift and go to state 8
    whileSt                        shift and go to state 9
    ifSt                           shift and go to state 10

state 121

    (26) block -> LLAVEIZQ LLAVEDER .

    PRINT           reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    PRINTLN         reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    ID              reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    FUNCTION        reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    RWHILE          reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    RIF             reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    $end            reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    LLAVEDER        reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)
    RELSE           reduce using rule 26 (block -> LLAVEIZQ LLAVEDER .)


state 122

    (28) ifSt -> RIF PARIZQ exp PARDER block elseSt .

    PRINT           reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    PRINTLN         reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    ID              reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    FUNCTION        reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    RWHILE          reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    RIF             reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    $end            reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    LLAVEDER        reduce using rule 28 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)


state 123

    (29) elseSt -> RELSE . block
    (25) block -> . LLAVEIZQ instructions LLAVEDER
    (26) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 112

    block                          shift and go to state 128

state 124

    (30) elseSt -> ifSt .

    PRINT           reduce using rule 30 (elseSt -> ifSt .)
    PRINTLN         reduce using rule 30 (elseSt -> ifSt .)
    ID              reduce using rule 30 (elseSt -> ifSt .)
    FUNCTION        reduce using rule 30 (elseSt -> ifSt .)
    RWHILE          reduce using rule 30 (elseSt -> ifSt .)
    RIF             reduce using rule 30 (elseSt -> ifSt .)
    $end            reduce using rule 30 (elseSt -> ifSt .)
    LLAVEDER        reduce using rule 30 (elseSt -> ifSt .)


state 125

    (66) listArray -> listArray CORIZQ exp CORDER .

    CORIZQ          reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    PARDER          reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MAS             reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MENOS           reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MULTIPLICACION  reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    DIVISION        reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    POTENCIA        reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MODULO          reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MAYOR           reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MENOR           reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    IGUALIGUAL      reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MAYORIGUAL      reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    MENORIGUAL      reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    DISTINTO        reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    ANDD            reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    ORR             reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    PTCOMA          reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    DOSPT           reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    COMA            reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)
    CORDER          reduce using rule 66 (listArray -> listArray CORIZQ exp CORDER .)


state 126

    (15) declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .

    PRINT           reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    PRINTLN         reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    ID              reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    FUNCTION        reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    RWHILE          reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    RIF             reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    $end            reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)
    LLAVEDER        reduce using rule 15 (declaration -> ID IGUAL exp DOSPT DOSPT typeDef PTCOMA .)


state 127

    (25) block -> LLAVEIZQ instructions LLAVEDER .

    PRINT           reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    PRINTLN         reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    ID              reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    FUNCTION        reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    RWHILE          reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    RIF             reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    $end            reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    LLAVEDER        reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)
    RELSE           reduce using rule 25 (block -> LLAVEIZQ instructions LLAVEDER .)


state 128

    (29) elseSt -> RELSE block .

    PRINT           reduce using rule 29 (elseSt -> RELSE block .)
    PRINTLN         reduce using rule 29 (elseSt -> RELSE block .)
    ID              reduce using rule 29 (elseSt -> RELSE block .)
    FUNCTION        reduce using rule 29 (elseSt -> RELSE block .)
    RWHILE          reduce using rule 29 (elseSt -> RELSE block .)
    RIF             reduce using rule 29 (elseSt -> RELSE block .)
    $end            reduce using rule 29 (elseSt -> RELSE block .)
    LLAVEDER        reduce using rule 29 (elseSt -> RELSE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 90 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 90 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 90 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 90 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 90 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 90 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 90 resolved as shift
WARNING: shift/reduce conflict for IGUALIGUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for DISTINTO in state 90 resolved as shift
WARNING: shift/reduce conflict for ANDD in state 90 resolved as shift
WARNING: shift/reduce conflict for ORR in state 90 resolved as shift
