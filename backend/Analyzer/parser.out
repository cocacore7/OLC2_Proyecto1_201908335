Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> initial
Rule 1     initial -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> p_print
Rule 5     instruction -> p_println
Rule 6     instruction -> declaration
Rule 7     instruction -> assignment
Rule 8     instruction -> function
Rule 9     instruction -> callFuncSt
Rule 10    instruction -> whileSt
Rule 11    instruction -> ifSt
Rule 12    empty -> <empty>
Rule 13    p_print -> PRINT PARIZQ exp PARDER PTCOMA
Rule 14    p_println -> PRINTLN PARIZQ exp PARDER PTCOMA
Rule 15    declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA
Rule 16    assignment -> ID IGUAL exp PTCOMA
Rule 17    function -> FUNCTION ID parametersFunc DOSPT typeDef block
Rule 18    parametersFunc -> PARIZQ parameters PARDER
Rule 19    parametersFunc -> PARIZQ PARDER
Rule 20    callFuncSt -> ID parametersCallFunc PTCOMA
Rule 21    parameters -> parameters COMA parameter
Rule 22    parameters -> parameter
Rule 23    parameter -> ID DOSPT typeDef
Rule 24    parametersCallFunc -> PARIZQ listValues PARDER
Rule 25    parametersCallFunc -> PARIZQ PARDER
Rule 26    block -> LLAVEIZQ instructions LLAVEDER
Rule 27    block -> LLAVEIZQ LLAVEDER
Rule 28    whileSt -> RWHILE PARIZQ exp PARDER block
Rule 29    ifSt -> RIF PARIZQ exp PARDER block elseSt
Rule 30    elseSt -> RELSE block
Rule 31    elseSt -> ifSt
Rule 32    decArray -> CORIZQ CORDER
Rule 33    decArray -> empty
Rule 34    listValues -> listValues COMA exp
Rule 35    listValues -> exp
Rule 36    typeDef -> RSTRING
Rule 37    typeDef -> RINT
Rule 38    typeDef -> RFLOAT
Rule 39    typeDef -> RBOOL
Rule 40    typeDef -> RCHAR
Rule 41    exp -> exp MAS exp
Rule 42    exp -> exp MENOS exp
Rule 43    exp -> exp MULTIPLICACION exp
Rule 44    exp -> exp DIVISION exp
Rule 45    exp -> exp POTENCIA exp
Rule 46    exp -> exp MODULO exp
Rule 47    exp -> exp MAYOR exp
Rule 48    exp -> exp MENOR exp
Rule 49    exp -> exp IGUALIGUAL exp
Rule 50    exp -> exp MAYORIGUAL exp
Rule 51    exp -> exp MENORIGUAL exp
Rule 52    exp -> exp DISTINTO exp
Rule 53    exp -> exp ANDD exp
Rule 54    exp -> exp ORR exp
Rule 55    exp -> NOTT exp
Rule 56    exp -> PARIZQ exp PARDER
Rule 57    exp -> ENTERO
Rule 58    exp -> DECIMAL
Rule 59    exp -> STRING
Rule 60    exp -> CHAR
Rule 61    exp -> VERDADERO
Rule 62    exp -> FALSO
Rule 63    exp -> NULO
Rule 64    exp -> ID
Rule 65    exp -> ID listArray
Rule 66    exp -> CORIZQ listValues CORDER
Rule 67    listArray -> listArray CORIZQ exp CORDER
Rule 68    listArray -> CORIZQ exp CORDER

Terminals, with rules where they appear

ANDD                 : 53
CHAR                 : 60
COMA                 : 21 34
CORDER               : 32 66 67 68
CORIZQ               : 32 66 67 68
DECIMAL              : 58
DISTINTO             : 52
DIVISION             : 44
DOSPT                : 15 17 23
ENTERO               : 57
FALSO                : 62
FUNCTION             : 17
ID                   : 15 16 17 20 23 64 65
IGUAL                : 15 16
IGUALIGUAL           : 49
LET                  : 15
LLAVEDER             : 26 27
LLAVEIZQ             : 26 27
MAS                  : 41
MAYOR                : 47
MAYORIGUAL           : 50
MENOR                : 48
MENORIGUAL           : 51
MENOS                : 42
MODULO               : 46
MULTIPLICACION       : 43
NOTT                 : 55
NULO                 : 63
ORR                  : 54
PARDER               : 13 14 18 19 24 25 28 29 56
PARIZQ               : 13 14 18 19 24 25 28 29 56
POTENCIA             : 45
PRINT                : 13
PRINTLN              : 14
PTCOMA               : 13 14 15 16 20
RBOOL                : 39
RCHAR                : 40
RELSE                : 30
RFLOAT               : 38
RIF                  : 29
RINT                 : 37
RSTRING              : 36
RWHILE               : 28
STRING               : 59
VERDADERO            : 61
error                : 

Nonterminals, with rules where they appear

assignment           : 7
block                : 17 28 29 30
callFuncSt           : 9
decArray             : 15
declaration          : 6
elseSt               : 29
empty                : 33
exp                  : 13 14 15 16 28 29 34 35 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 56 67 68
function             : 8
ifSt                 : 11 31
initial              : 0
instruction          : 2 3
instructions         : 1 2 26
listArray            : 65 67
listValues           : 24 34 66
p_print              : 4
p_println            : 5
parameter            : 21 22
parameters           : 18 21
parametersCallFunc   : 20
parametersFunc       : 17
typeDef              : 15 17 23
whileSt              : 10

Parsing method: LALR

state 0

    (0) S' -> . initial
    (1) initial -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) instruction -> . function
    (9) instruction -> . callFuncSt
    (10) instruction -> . whileSt
    (11) instruction -> . ifSt
    (13) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (14) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (15) declaration -> . LET ID DOSPT typeDef decArray IGUAL exp PTCOMA
    (16) assignment -> . ID IGUAL exp PTCOMA
    (17) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (20) callFuncSt -> . ID parametersCallFunc PTCOMA
    (28) whileSt -> . RWHILE PARIZQ exp PARDER block
    (29) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    LET             shift and go to state 14
    ID              shift and go to state 15
    FUNCTION        shift and go to state 16
    RWHILE          shift and go to state 17
    RIF             shift and go to state 18

    initial                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    function                       shift and go to state 8
    callFuncSt                     shift and go to state 9
    whileSt                        shift and go to state 10
    ifSt                           shift and go to state 11

state 1

    (0) S' -> initial .



state 2

    (1) initial -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) instruction -> . function
    (9) instruction -> . callFuncSt
    (10) instruction -> . whileSt
    (11) instruction -> . ifSt
    (13) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (14) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (15) declaration -> . LET ID DOSPT typeDef decArray IGUAL exp PTCOMA
    (16) assignment -> . ID IGUAL exp PTCOMA
    (17) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (20) callFuncSt -> . ID parametersCallFunc PTCOMA
    (28) whileSt -> . RWHILE PARIZQ exp PARDER block
    (29) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    $end            reduce using rule 1 (initial -> instructions .)
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    LET             shift and go to state 14
    ID              shift and go to state 15
    FUNCTION        shift and go to state 16
    RWHILE          shift and go to state 17
    RIF             shift and go to state 18

    instruction                    shift and go to state 19
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    function                       shift and go to state 8
    callFuncSt                     shift and go to state 9
    whileSt                        shift and go to state 10
    ifSt                           shift and go to state 11

state 3

    (3) instructions -> instruction .

    PRINT           reduce using rule 3 (instructions -> instruction .)
    PRINTLN         reduce using rule 3 (instructions -> instruction .)
    LET             reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    FUNCTION        reduce using rule 3 (instructions -> instruction .)
    RWHILE          reduce using rule 3 (instructions -> instruction .)
    RIF             reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    LLAVEDER        reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> p_print .

    PRINT           reduce using rule 4 (instruction -> p_print .)
    PRINTLN         reduce using rule 4 (instruction -> p_print .)
    LET             reduce using rule 4 (instruction -> p_print .)
    ID              reduce using rule 4 (instruction -> p_print .)
    FUNCTION        reduce using rule 4 (instruction -> p_print .)
    RWHILE          reduce using rule 4 (instruction -> p_print .)
    RIF             reduce using rule 4 (instruction -> p_print .)
    $end            reduce using rule 4 (instruction -> p_print .)
    LLAVEDER        reduce using rule 4 (instruction -> p_print .)


state 5

    (5) instruction -> p_println .

    PRINT           reduce using rule 5 (instruction -> p_println .)
    PRINTLN         reduce using rule 5 (instruction -> p_println .)
    LET             reduce using rule 5 (instruction -> p_println .)
    ID              reduce using rule 5 (instruction -> p_println .)
    FUNCTION        reduce using rule 5 (instruction -> p_println .)
    RWHILE          reduce using rule 5 (instruction -> p_println .)
    RIF             reduce using rule 5 (instruction -> p_println .)
    $end            reduce using rule 5 (instruction -> p_println .)
    LLAVEDER        reduce using rule 5 (instruction -> p_println .)


state 6

    (6) instruction -> declaration .

    PRINT           reduce using rule 6 (instruction -> declaration .)
    PRINTLN         reduce using rule 6 (instruction -> declaration .)
    LET             reduce using rule 6 (instruction -> declaration .)
    ID              reduce using rule 6 (instruction -> declaration .)
    FUNCTION        reduce using rule 6 (instruction -> declaration .)
    RWHILE          reduce using rule 6 (instruction -> declaration .)
    RIF             reduce using rule 6 (instruction -> declaration .)
    $end            reduce using rule 6 (instruction -> declaration .)
    LLAVEDER        reduce using rule 6 (instruction -> declaration .)


state 7

    (7) instruction -> assignment .

    PRINT           reduce using rule 7 (instruction -> assignment .)
    PRINTLN         reduce using rule 7 (instruction -> assignment .)
    LET             reduce using rule 7 (instruction -> assignment .)
    ID              reduce using rule 7 (instruction -> assignment .)
    FUNCTION        reduce using rule 7 (instruction -> assignment .)
    RWHILE          reduce using rule 7 (instruction -> assignment .)
    RIF             reduce using rule 7 (instruction -> assignment .)
    $end            reduce using rule 7 (instruction -> assignment .)
    LLAVEDER        reduce using rule 7 (instruction -> assignment .)


state 8

    (8) instruction -> function .

    PRINT           reduce using rule 8 (instruction -> function .)
    PRINTLN         reduce using rule 8 (instruction -> function .)
    LET             reduce using rule 8 (instruction -> function .)
    ID              reduce using rule 8 (instruction -> function .)
    FUNCTION        reduce using rule 8 (instruction -> function .)
    RWHILE          reduce using rule 8 (instruction -> function .)
    RIF             reduce using rule 8 (instruction -> function .)
    $end            reduce using rule 8 (instruction -> function .)
    LLAVEDER        reduce using rule 8 (instruction -> function .)


state 9

    (9) instruction -> callFuncSt .

    PRINT           reduce using rule 9 (instruction -> callFuncSt .)
    PRINTLN         reduce using rule 9 (instruction -> callFuncSt .)
    LET             reduce using rule 9 (instruction -> callFuncSt .)
    ID              reduce using rule 9 (instruction -> callFuncSt .)
    FUNCTION        reduce using rule 9 (instruction -> callFuncSt .)
    RWHILE          reduce using rule 9 (instruction -> callFuncSt .)
    RIF             reduce using rule 9 (instruction -> callFuncSt .)
    $end            reduce using rule 9 (instruction -> callFuncSt .)
    LLAVEDER        reduce using rule 9 (instruction -> callFuncSt .)


state 10

    (10) instruction -> whileSt .

    PRINT           reduce using rule 10 (instruction -> whileSt .)
    PRINTLN         reduce using rule 10 (instruction -> whileSt .)
    LET             reduce using rule 10 (instruction -> whileSt .)
    ID              reduce using rule 10 (instruction -> whileSt .)
    FUNCTION        reduce using rule 10 (instruction -> whileSt .)
    RWHILE          reduce using rule 10 (instruction -> whileSt .)
    RIF             reduce using rule 10 (instruction -> whileSt .)
    $end            reduce using rule 10 (instruction -> whileSt .)
    LLAVEDER        reduce using rule 10 (instruction -> whileSt .)


state 11

    (11) instruction -> ifSt .

    PRINT           reduce using rule 11 (instruction -> ifSt .)
    PRINTLN         reduce using rule 11 (instruction -> ifSt .)
    LET             reduce using rule 11 (instruction -> ifSt .)
    ID              reduce using rule 11 (instruction -> ifSt .)
    FUNCTION        reduce using rule 11 (instruction -> ifSt .)
    RWHILE          reduce using rule 11 (instruction -> ifSt .)
    RIF             reduce using rule 11 (instruction -> ifSt .)
    $end            reduce using rule 11 (instruction -> ifSt .)
    LLAVEDER        reduce using rule 11 (instruction -> ifSt .)


state 12

    (13) p_print -> PRINT . PARIZQ exp PARDER PTCOMA

    PARIZQ          shift and go to state 20


state 13

    (14) p_println -> PRINTLN . PARIZQ exp PARDER PTCOMA

    PARIZQ          shift and go to state 21


state 14

    (15) declaration -> LET . ID DOSPT typeDef decArray IGUAL exp PTCOMA

    ID              shift and go to state 22


state 15

    (16) assignment -> ID . IGUAL exp PTCOMA
    (20) callFuncSt -> ID . parametersCallFunc PTCOMA
    (24) parametersCallFunc -> . PARIZQ listValues PARDER
    (25) parametersCallFunc -> . PARIZQ PARDER

    IGUAL           shift and go to state 23
    PARIZQ          shift and go to state 25

    parametersCallFunc             shift and go to state 24

state 16

    (17) function -> FUNCTION . ID parametersFunc DOSPT typeDef block

    ID              shift and go to state 26


state 17

    (28) whileSt -> RWHILE . PARIZQ exp PARDER block

    PARIZQ          shift and go to state 27


state 18

    (29) ifSt -> RIF . PARIZQ exp PARDER block elseSt

    PARIZQ          shift and go to state 28


state 19

    (2) instructions -> instructions instruction .

    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    PRINTLN         reduce using rule 2 (instructions -> instructions instruction .)
    LET             reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    FUNCTION        reduce using rule 2 (instructions -> instructions instruction .)
    RWHILE          reduce using rule 2 (instructions -> instructions instruction .)
    RIF             reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    LLAVEDER        reduce using rule 2 (instructions -> instructions instruction .)


state 20

    (13) p_print -> PRINT PARIZQ . exp PARDER PTCOMA
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 30

state 21

    (14) p_println -> PRINTLN PARIZQ . exp PARDER PTCOMA
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 41

state 22

    (15) declaration -> LET ID . DOSPT typeDef decArray IGUAL exp PTCOMA

    DOSPT           shift and go to state 42


state 23

    (16) assignment -> ID IGUAL . exp PTCOMA
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 43

state 24

    (20) callFuncSt -> ID parametersCallFunc . PTCOMA

    PTCOMA          shift and go to state 44


state 25

    (24) parametersCallFunc -> PARIZQ . listValues PARDER
    (25) parametersCallFunc -> PARIZQ . PARDER
    (34) listValues -> . listValues COMA exp
    (35) listValues -> . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    PARDER          shift and go to state 46
    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    listValues                     shift and go to state 45
    exp                            shift and go to state 47

state 26

    (17) function -> FUNCTION ID . parametersFunc DOSPT typeDef block
    (18) parametersFunc -> . PARIZQ parameters PARDER
    (19) parametersFunc -> . PARIZQ PARDER

    PARIZQ          shift and go to state 49

    parametersFunc                 shift and go to state 48

state 27

    (28) whileSt -> RWHILE PARIZQ . exp PARDER block
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 50

state 28

    (29) ifSt -> RIF PARIZQ . exp PARDER block elseSt
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 51

state 29

    (56) exp -> PARIZQ . exp PARDER
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 52

state 30

    (13) p_print -> PRINT PARIZQ exp . PARDER PTCOMA
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          shift and go to state 53
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 31

    (55) exp -> NOTT . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 68

state 32

    (57) exp -> ENTERO .

    PARDER          reduce using rule 57 (exp -> ENTERO .)
    MAS             reduce using rule 57 (exp -> ENTERO .)
    MENOS           reduce using rule 57 (exp -> ENTERO .)
    MULTIPLICACION  reduce using rule 57 (exp -> ENTERO .)
    DIVISION        reduce using rule 57 (exp -> ENTERO .)
    POTENCIA        reduce using rule 57 (exp -> ENTERO .)
    MODULO          reduce using rule 57 (exp -> ENTERO .)
    MAYOR           reduce using rule 57 (exp -> ENTERO .)
    MENOR           reduce using rule 57 (exp -> ENTERO .)
    IGUALIGUAL      reduce using rule 57 (exp -> ENTERO .)
    MAYORIGUAL      reduce using rule 57 (exp -> ENTERO .)
    MENORIGUAL      reduce using rule 57 (exp -> ENTERO .)
    DISTINTO        reduce using rule 57 (exp -> ENTERO .)
    ANDD            reduce using rule 57 (exp -> ENTERO .)
    ORR             reduce using rule 57 (exp -> ENTERO .)
    PTCOMA          reduce using rule 57 (exp -> ENTERO .)
    COMA            reduce using rule 57 (exp -> ENTERO .)
    CORDER          reduce using rule 57 (exp -> ENTERO .)


state 33

    (58) exp -> DECIMAL .

    PARDER          reduce using rule 58 (exp -> DECIMAL .)
    MAS             reduce using rule 58 (exp -> DECIMAL .)
    MENOS           reduce using rule 58 (exp -> DECIMAL .)
    MULTIPLICACION  reduce using rule 58 (exp -> DECIMAL .)
    DIVISION        reduce using rule 58 (exp -> DECIMAL .)
    POTENCIA        reduce using rule 58 (exp -> DECIMAL .)
    MODULO          reduce using rule 58 (exp -> DECIMAL .)
    MAYOR           reduce using rule 58 (exp -> DECIMAL .)
    MENOR           reduce using rule 58 (exp -> DECIMAL .)
    IGUALIGUAL      reduce using rule 58 (exp -> DECIMAL .)
    MAYORIGUAL      reduce using rule 58 (exp -> DECIMAL .)
    MENORIGUAL      reduce using rule 58 (exp -> DECIMAL .)
    DISTINTO        reduce using rule 58 (exp -> DECIMAL .)
    ANDD            reduce using rule 58 (exp -> DECIMAL .)
    ORR             reduce using rule 58 (exp -> DECIMAL .)
    PTCOMA          reduce using rule 58 (exp -> DECIMAL .)
    COMA            reduce using rule 58 (exp -> DECIMAL .)
    CORDER          reduce using rule 58 (exp -> DECIMAL .)


state 34

    (59) exp -> STRING .

    PARDER          reduce using rule 59 (exp -> STRING .)
    MAS             reduce using rule 59 (exp -> STRING .)
    MENOS           reduce using rule 59 (exp -> STRING .)
    MULTIPLICACION  reduce using rule 59 (exp -> STRING .)
    DIVISION        reduce using rule 59 (exp -> STRING .)
    POTENCIA        reduce using rule 59 (exp -> STRING .)
    MODULO          reduce using rule 59 (exp -> STRING .)
    MAYOR           reduce using rule 59 (exp -> STRING .)
    MENOR           reduce using rule 59 (exp -> STRING .)
    IGUALIGUAL      reduce using rule 59 (exp -> STRING .)
    MAYORIGUAL      reduce using rule 59 (exp -> STRING .)
    MENORIGUAL      reduce using rule 59 (exp -> STRING .)
    DISTINTO        reduce using rule 59 (exp -> STRING .)
    ANDD            reduce using rule 59 (exp -> STRING .)
    ORR             reduce using rule 59 (exp -> STRING .)
    PTCOMA          reduce using rule 59 (exp -> STRING .)
    COMA            reduce using rule 59 (exp -> STRING .)
    CORDER          reduce using rule 59 (exp -> STRING .)


state 35

    (60) exp -> CHAR .

    PARDER          reduce using rule 60 (exp -> CHAR .)
    MAS             reduce using rule 60 (exp -> CHAR .)
    MENOS           reduce using rule 60 (exp -> CHAR .)
    MULTIPLICACION  reduce using rule 60 (exp -> CHAR .)
    DIVISION        reduce using rule 60 (exp -> CHAR .)
    POTENCIA        reduce using rule 60 (exp -> CHAR .)
    MODULO          reduce using rule 60 (exp -> CHAR .)
    MAYOR           reduce using rule 60 (exp -> CHAR .)
    MENOR           reduce using rule 60 (exp -> CHAR .)
    IGUALIGUAL      reduce using rule 60 (exp -> CHAR .)
    MAYORIGUAL      reduce using rule 60 (exp -> CHAR .)
    MENORIGUAL      reduce using rule 60 (exp -> CHAR .)
    DISTINTO        reduce using rule 60 (exp -> CHAR .)
    ANDD            reduce using rule 60 (exp -> CHAR .)
    ORR             reduce using rule 60 (exp -> CHAR .)
    PTCOMA          reduce using rule 60 (exp -> CHAR .)
    COMA            reduce using rule 60 (exp -> CHAR .)
    CORDER          reduce using rule 60 (exp -> CHAR .)


state 36

    (61) exp -> VERDADERO .

    PARDER          reduce using rule 61 (exp -> VERDADERO .)
    MAS             reduce using rule 61 (exp -> VERDADERO .)
    MENOS           reduce using rule 61 (exp -> VERDADERO .)
    MULTIPLICACION  reduce using rule 61 (exp -> VERDADERO .)
    DIVISION        reduce using rule 61 (exp -> VERDADERO .)
    POTENCIA        reduce using rule 61 (exp -> VERDADERO .)
    MODULO          reduce using rule 61 (exp -> VERDADERO .)
    MAYOR           reduce using rule 61 (exp -> VERDADERO .)
    MENOR           reduce using rule 61 (exp -> VERDADERO .)
    IGUALIGUAL      reduce using rule 61 (exp -> VERDADERO .)
    MAYORIGUAL      reduce using rule 61 (exp -> VERDADERO .)
    MENORIGUAL      reduce using rule 61 (exp -> VERDADERO .)
    DISTINTO        reduce using rule 61 (exp -> VERDADERO .)
    ANDD            reduce using rule 61 (exp -> VERDADERO .)
    ORR             reduce using rule 61 (exp -> VERDADERO .)
    PTCOMA          reduce using rule 61 (exp -> VERDADERO .)
    COMA            reduce using rule 61 (exp -> VERDADERO .)
    CORDER          reduce using rule 61 (exp -> VERDADERO .)


state 37

    (62) exp -> FALSO .

    PARDER          reduce using rule 62 (exp -> FALSO .)
    MAS             reduce using rule 62 (exp -> FALSO .)
    MENOS           reduce using rule 62 (exp -> FALSO .)
    MULTIPLICACION  reduce using rule 62 (exp -> FALSO .)
    DIVISION        reduce using rule 62 (exp -> FALSO .)
    POTENCIA        reduce using rule 62 (exp -> FALSO .)
    MODULO          reduce using rule 62 (exp -> FALSO .)
    MAYOR           reduce using rule 62 (exp -> FALSO .)
    MENOR           reduce using rule 62 (exp -> FALSO .)
    IGUALIGUAL      reduce using rule 62 (exp -> FALSO .)
    MAYORIGUAL      reduce using rule 62 (exp -> FALSO .)
    MENORIGUAL      reduce using rule 62 (exp -> FALSO .)
    DISTINTO        reduce using rule 62 (exp -> FALSO .)
    ANDD            reduce using rule 62 (exp -> FALSO .)
    ORR             reduce using rule 62 (exp -> FALSO .)
    PTCOMA          reduce using rule 62 (exp -> FALSO .)
    COMA            reduce using rule 62 (exp -> FALSO .)
    CORDER          reduce using rule 62 (exp -> FALSO .)


state 38

    (63) exp -> NULO .

    PARDER          reduce using rule 63 (exp -> NULO .)
    MAS             reduce using rule 63 (exp -> NULO .)
    MENOS           reduce using rule 63 (exp -> NULO .)
    MULTIPLICACION  reduce using rule 63 (exp -> NULO .)
    DIVISION        reduce using rule 63 (exp -> NULO .)
    POTENCIA        reduce using rule 63 (exp -> NULO .)
    MODULO          reduce using rule 63 (exp -> NULO .)
    MAYOR           reduce using rule 63 (exp -> NULO .)
    MENOR           reduce using rule 63 (exp -> NULO .)
    IGUALIGUAL      reduce using rule 63 (exp -> NULO .)
    MAYORIGUAL      reduce using rule 63 (exp -> NULO .)
    MENORIGUAL      reduce using rule 63 (exp -> NULO .)
    DISTINTO        reduce using rule 63 (exp -> NULO .)
    ANDD            reduce using rule 63 (exp -> NULO .)
    ORR             reduce using rule 63 (exp -> NULO .)
    PTCOMA          reduce using rule 63 (exp -> NULO .)
    COMA            reduce using rule 63 (exp -> NULO .)
    CORDER          reduce using rule 63 (exp -> NULO .)


state 39

    (64) exp -> ID .
    (65) exp -> ID . listArray
    (67) listArray -> . listArray CORIZQ exp CORDER
    (68) listArray -> . CORIZQ exp CORDER

    PARDER          reduce using rule 64 (exp -> ID .)
    MAS             reduce using rule 64 (exp -> ID .)
    MENOS           reduce using rule 64 (exp -> ID .)
    MULTIPLICACION  reduce using rule 64 (exp -> ID .)
    DIVISION        reduce using rule 64 (exp -> ID .)
    POTENCIA        reduce using rule 64 (exp -> ID .)
    MODULO          reduce using rule 64 (exp -> ID .)
    MAYOR           reduce using rule 64 (exp -> ID .)
    MENOR           reduce using rule 64 (exp -> ID .)
    IGUALIGUAL      reduce using rule 64 (exp -> ID .)
    MAYORIGUAL      reduce using rule 64 (exp -> ID .)
    MENORIGUAL      reduce using rule 64 (exp -> ID .)
    DISTINTO        reduce using rule 64 (exp -> ID .)
    ANDD            reduce using rule 64 (exp -> ID .)
    ORR             reduce using rule 64 (exp -> ID .)
    PTCOMA          reduce using rule 64 (exp -> ID .)
    COMA            reduce using rule 64 (exp -> ID .)
    CORDER          reduce using rule 64 (exp -> ID .)
    CORIZQ          shift and go to state 70

    listArray                      shift and go to state 69

state 40

    (66) exp -> CORIZQ . listValues CORDER
    (34) listValues -> . listValues COMA exp
    (35) listValues -> . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    listValues                     shift and go to state 71
    exp                            shift and go to state 47

state 41

    (14) p_println -> PRINTLN PARIZQ exp . PARDER PTCOMA
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          shift and go to state 72
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 42

    (15) declaration -> LET ID DOSPT . typeDef decArray IGUAL exp PTCOMA
    (36) typeDef -> . RSTRING
    (37) typeDef -> . RINT
    (38) typeDef -> . RFLOAT
    (39) typeDef -> . RBOOL
    (40) typeDef -> . RCHAR

    RSTRING         shift and go to state 74
    RINT            shift and go to state 75
    RFLOAT          shift and go to state 76
    RBOOL           shift and go to state 77
    RCHAR           shift and go to state 78

    typeDef                        shift and go to state 73

state 43

    (16) assignment -> ID IGUAL exp . PTCOMA
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PTCOMA          shift and go to state 79
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 44

    (20) callFuncSt -> ID parametersCallFunc PTCOMA .

    PRINT           reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    PRINTLN         reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    LET             reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    ID              reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    FUNCTION        reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    RWHILE          reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    RIF             reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    $end            reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)
    LLAVEDER        reduce using rule 20 (callFuncSt -> ID parametersCallFunc PTCOMA .)


state 45

    (24) parametersCallFunc -> PARIZQ listValues . PARDER
    (34) listValues -> listValues . COMA exp

    PARDER          shift and go to state 80
    COMA            shift and go to state 81


state 46

    (25) parametersCallFunc -> PARIZQ PARDER .

    PTCOMA          reduce using rule 25 (parametersCallFunc -> PARIZQ PARDER .)


state 47

    (35) listValues -> exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 35 (listValues -> exp .)
    COMA            reduce using rule 35 (listValues -> exp .)
    CORDER          reduce using rule 35 (listValues -> exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 48

    (17) function -> FUNCTION ID parametersFunc . DOSPT typeDef block

    DOSPT           shift and go to state 82


state 49

    (18) parametersFunc -> PARIZQ . parameters PARDER
    (19) parametersFunc -> PARIZQ . PARDER
    (21) parameters -> . parameters COMA parameter
    (22) parameters -> . parameter
    (23) parameter -> . ID DOSPT typeDef

    PARDER          shift and go to state 84
    ID              shift and go to state 86

    parameters                     shift and go to state 83
    parameter                      shift and go to state 85

state 50

    (28) whileSt -> RWHILE PARIZQ exp . PARDER block
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          shift and go to state 87
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 51

    (29) ifSt -> RIF PARIZQ exp . PARDER block elseSt
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          shift and go to state 88
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 52

    (56) exp -> PARIZQ exp . PARDER
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          shift and go to state 89
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 53

    (13) p_print -> PRINT PARIZQ exp PARDER . PTCOMA

    PTCOMA          shift and go to state 90


state 54

    (41) exp -> exp MAS . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 91

state 55

    (42) exp -> exp MENOS . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 92

state 56

    (43) exp -> exp MULTIPLICACION . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 93

state 57

    (44) exp -> exp DIVISION . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 94

state 58

    (45) exp -> exp POTENCIA . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 95

state 59

    (46) exp -> exp MODULO . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 96

state 60

    (47) exp -> exp MAYOR . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 97

state 61

    (48) exp -> exp MENOR . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 98

state 62

    (49) exp -> exp IGUALIGUAL . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 99

state 63

    (50) exp -> exp MAYORIGUAL . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 100

state 64

    (51) exp -> exp MENORIGUAL . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 101

state 65

    (52) exp -> exp DISTINTO . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 102

state 66

    (53) exp -> exp ANDD . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 103

state 67

    (54) exp -> exp ORR . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 104

state 68

    (55) exp -> NOTT exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 55 (exp -> NOTT exp .)
    IGUALIGUAL      reduce using rule 55 (exp -> NOTT exp .)
    ANDD            reduce using rule 55 (exp -> NOTT exp .)
    ORR             reduce using rule 55 (exp -> NOTT exp .)
    PTCOMA          reduce using rule 55 (exp -> NOTT exp .)
    COMA            reduce using rule 55 (exp -> NOTT exp .)
    CORDER          reduce using rule 55 (exp -> NOTT exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65

  ! MAS             [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MENOS           [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MULTIPLICACION  [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! DIVISION        [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! POTENCIA        [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MODULO          [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MAYOR           [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MENOR           [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MAYORIGUAL      [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! MENORIGUAL      [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! DISTINTO        [ reduce using rule 55 (exp -> NOTT exp .) ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 69

    (65) exp -> ID listArray .
    (67) listArray -> listArray . CORIZQ exp CORDER

    PARDER          reduce using rule 65 (exp -> ID listArray .)
    MAS             reduce using rule 65 (exp -> ID listArray .)
    MENOS           reduce using rule 65 (exp -> ID listArray .)
    MULTIPLICACION  reduce using rule 65 (exp -> ID listArray .)
    DIVISION        reduce using rule 65 (exp -> ID listArray .)
    POTENCIA        reduce using rule 65 (exp -> ID listArray .)
    MODULO          reduce using rule 65 (exp -> ID listArray .)
    MAYOR           reduce using rule 65 (exp -> ID listArray .)
    MENOR           reduce using rule 65 (exp -> ID listArray .)
    IGUALIGUAL      reduce using rule 65 (exp -> ID listArray .)
    MAYORIGUAL      reduce using rule 65 (exp -> ID listArray .)
    MENORIGUAL      reduce using rule 65 (exp -> ID listArray .)
    DISTINTO        reduce using rule 65 (exp -> ID listArray .)
    ANDD            reduce using rule 65 (exp -> ID listArray .)
    ORR             reduce using rule 65 (exp -> ID listArray .)
    PTCOMA          reduce using rule 65 (exp -> ID listArray .)
    COMA            reduce using rule 65 (exp -> ID listArray .)
    CORDER          reduce using rule 65 (exp -> ID listArray .)
    CORIZQ          shift and go to state 105


state 70

    (68) listArray -> CORIZQ . exp CORDER
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 106

state 71

    (66) exp -> CORIZQ listValues . CORDER
    (34) listValues -> listValues . COMA exp

    CORDER          shift and go to state 107
    COMA            shift and go to state 81


state 72

    (14) p_println -> PRINTLN PARIZQ exp PARDER . PTCOMA

    PTCOMA          shift and go to state 108


state 73

    (15) declaration -> LET ID DOSPT typeDef . decArray IGUAL exp PTCOMA
    (32) decArray -> . CORIZQ CORDER
    (33) decArray -> . empty
    (12) empty -> .

    CORIZQ          shift and go to state 110
    IGUAL           reduce using rule 12 (empty -> .)

    decArray                       shift and go to state 109
    empty                          shift and go to state 111

state 74

    (36) typeDef -> RSTRING .

    CORIZQ          reduce using rule 36 (typeDef -> RSTRING .)
    IGUAL           reduce using rule 36 (typeDef -> RSTRING .)
    LLAVEIZQ        reduce using rule 36 (typeDef -> RSTRING .)
    PARDER          reduce using rule 36 (typeDef -> RSTRING .)
    COMA            reduce using rule 36 (typeDef -> RSTRING .)


state 75

    (37) typeDef -> RINT .

    CORIZQ          reduce using rule 37 (typeDef -> RINT .)
    IGUAL           reduce using rule 37 (typeDef -> RINT .)
    LLAVEIZQ        reduce using rule 37 (typeDef -> RINT .)
    PARDER          reduce using rule 37 (typeDef -> RINT .)
    COMA            reduce using rule 37 (typeDef -> RINT .)


state 76

    (38) typeDef -> RFLOAT .

    CORIZQ          reduce using rule 38 (typeDef -> RFLOAT .)
    IGUAL           reduce using rule 38 (typeDef -> RFLOAT .)
    LLAVEIZQ        reduce using rule 38 (typeDef -> RFLOAT .)
    PARDER          reduce using rule 38 (typeDef -> RFLOAT .)
    COMA            reduce using rule 38 (typeDef -> RFLOAT .)


state 77

    (39) typeDef -> RBOOL .

    CORIZQ          reduce using rule 39 (typeDef -> RBOOL .)
    IGUAL           reduce using rule 39 (typeDef -> RBOOL .)
    LLAVEIZQ        reduce using rule 39 (typeDef -> RBOOL .)
    PARDER          reduce using rule 39 (typeDef -> RBOOL .)
    COMA            reduce using rule 39 (typeDef -> RBOOL .)


state 78

    (40) typeDef -> RCHAR .

    CORIZQ          reduce using rule 40 (typeDef -> RCHAR .)
    IGUAL           reduce using rule 40 (typeDef -> RCHAR .)
    LLAVEIZQ        reduce using rule 40 (typeDef -> RCHAR .)
    PARDER          reduce using rule 40 (typeDef -> RCHAR .)
    COMA            reduce using rule 40 (typeDef -> RCHAR .)


state 79

    (16) assignment -> ID IGUAL exp PTCOMA .

    PRINT           reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    PRINTLN         reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    LET             reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    ID              reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    FUNCTION        reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    RWHILE          reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    RIF             reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    $end            reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)
    LLAVEDER        reduce using rule 16 (assignment -> ID IGUAL exp PTCOMA .)


state 80

    (24) parametersCallFunc -> PARIZQ listValues PARDER .

    PTCOMA          reduce using rule 24 (parametersCallFunc -> PARIZQ listValues PARDER .)


state 81

    (34) listValues -> listValues COMA . exp
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 112

state 82

    (17) function -> FUNCTION ID parametersFunc DOSPT . typeDef block
    (36) typeDef -> . RSTRING
    (37) typeDef -> . RINT
    (38) typeDef -> . RFLOAT
    (39) typeDef -> . RBOOL
    (40) typeDef -> . RCHAR

    RSTRING         shift and go to state 74
    RINT            shift and go to state 75
    RFLOAT          shift and go to state 76
    RBOOL           shift and go to state 77
    RCHAR           shift and go to state 78

    typeDef                        shift and go to state 113

state 83

    (18) parametersFunc -> PARIZQ parameters . PARDER
    (21) parameters -> parameters . COMA parameter

    PARDER          shift and go to state 114
    COMA            shift and go to state 115


state 84

    (19) parametersFunc -> PARIZQ PARDER .

    DOSPT           reduce using rule 19 (parametersFunc -> PARIZQ PARDER .)


state 85

    (22) parameters -> parameter .

    PARDER          reduce using rule 22 (parameters -> parameter .)
    COMA            reduce using rule 22 (parameters -> parameter .)


state 86

    (23) parameter -> ID . DOSPT typeDef

    DOSPT           shift and go to state 116


state 87

    (28) whileSt -> RWHILE PARIZQ exp PARDER . block
    (26) block -> . LLAVEIZQ instructions LLAVEDER
    (27) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 118

    block                          shift and go to state 117

state 88

    (29) ifSt -> RIF PARIZQ exp PARDER . block elseSt
    (26) block -> . LLAVEIZQ instructions LLAVEDER
    (27) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 118

    block                          shift and go to state 119

state 89

    (56) exp -> PARIZQ exp PARDER .

    PARDER          reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MAS             reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MENOS           reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MULTIPLICACION  reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    DIVISION        reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    POTENCIA        reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MODULO          reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MAYOR           reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MENOR           reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    IGUALIGUAL      reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MAYORIGUAL      reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    MENORIGUAL      reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    DISTINTO        reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    ANDD            reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    ORR             reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    PTCOMA          reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    COMA            reduce using rule 56 (exp -> PARIZQ exp PARDER .)
    CORDER          reduce using rule 56 (exp -> PARIZQ exp PARDER .)


state 90

    (13) p_print -> PRINT PARIZQ exp PARDER PTCOMA .

    PRINT           reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    PRINTLN         reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    LET             reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    ID              reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    FUNCTION        reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    RWHILE          reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    RIF             reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    $end            reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)
    LLAVEDER        reduce using rule 13 (p_print -> PRINT PARIZQ exp PARDER PTCOMA .)


state 91

    (41) exp -> exp MAS exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 41 (exp -> exp MAS exp .)
    MAS             reduce using rule 41 (exp -> exp MAS exp .)
    MENOS           reduce using rule 41 (exp -> exp MAS exp .)
    MAYOR           reduce using rule 41 (exp -> exp MAS exp .)
    MENOR           reduce using rule 41 (exp -> exp MAS exp .)
    IGUALIGUAL      reduce using rule 41 (exp -> exp MAS exp .)
    MAYORIGUAL      reduce using rule 41 (exp -> exp MAS exp .)
    MENORIGUAL      reduce using rule 41 (exp -> exp MAS exp .)
    DISTINTO        reduce using rule 41 (exp -> exp MAS exp .)
    ANDD            reduce using rule 41 (exp -> exp MAS exp .)
    ORR             reduce using rule 41 (exp -> exp MAS exp .)
    PTCOMA          reduce using rule 41 (exp -> exp MAS exp .)
    COMA            reduce using rule 41 (exp -> exp MAS exp .)
    CORDER          reduce using rule 41 (exp -> exp MAS exp .)
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59

  ! MULTIPLICACION  [ reduce using rule 41 (exp -> exp MAS exp .) ]
  ! DIVISION        [ reduce using rule 41 (exp -> exp MAS exp .) ]
  ! POTENCIA        [ reduce using rule 41 (exp -> exp MAS exp .) ]
  ! MODULO          [ reduce using rule 41 (exp -> exp MAS exp .) ]
  ! MAS             [ shift and go to state 54 ]
  ! MENOS           [ shift and go to state 55 ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 92

    (42) exp -> exp MENOS exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 42 (exp -> exp MENOS exp .)
    MAS             reduce using rule 42 (exp -> exp MENOS exp .)
    MENOS           reduce using rule 42 (exp -> exp MENOS exp .)
    MAYOR           reduce using rule 42 (exp -> exp MENOS exp .)
    MENOR           reduce using rule 42 (exp -> exp MENOS exp .)
    IGUALIGUAL      reduce using rule 42 (exp -> exp MENOS exp .)
    MAYORIGUAL      reduce using rule 42 (exp -> exp MENOS exp .)
    MENORIGUAL      reduce using rule 42 (exp -> exp MENOS exp .)
    DISTINTO        reduce using rule 42 (exp -> exp MENOS exp .)
    ANDD            reduce using rule 42 (exp -> exp MENOS exp .)
    ORR             reduce using rule 42 (exp -> exp MENOS exp .)
    PTCOMA          reduce using rule 42 (exp -> exp MENOS exp .)
    COMA            reduce using rule 42 (exp -> exp MENOS exp .)
    CORDER          reduce using rule 42 (exp -> exp MENOS exp .)
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59

  ! MULTIPLICACION  [ reduce using rule 42 (exp -> exp MENOS exp .) ]
  ! DIVISION        [ reduce using rule 42 (exp -> exp MENOS exp .) ]
  ! POTENCIA        [ reduce using rule 42 (exp -> exp MENOS exp .) ]
  ! MODULO          [ reduce using rule 42 (exp -> exp MENOS exp .) ]
  ! MAS             [ shift and go to state 54 ]
  ! MENOS           [ shift and go to state 55 ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 93

    (43) exp -> exp MULTIPLICACION exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MAS             reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MENOS           reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MULTIPLICACION  reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    DIVISION        reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MODULO          reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MAYOR           reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MENOR           reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    IGUALIGUAL      reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MAYORIGUAL      reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    MENORIGUAL      reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    DISTINTO        reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    ANDD            reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    ORR             reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    PTCOMA          reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    COMA            reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    CORDER          reduce using rule 43 (exp -> exp MULTIPLICACION exp .)
    POTENCIA        shift and go to state 58

  ! POTENCIA        [ reduce using rule 43 (exp -> exp MULTIPLICACION exp .) ]
  ! MAS             [ shift and go to state 54 ]
  ! MENOS           [ shift and go to state 55 ]
  ! MULTIPLICACION  [ shift and go to state 56 ]
  ! DIVISION        [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 59 ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 94

    (44) exp -> exp DIVISION exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 44 (exp -> exp DIVISION exp .)
    MAS             reduce using rule 44 (exp -> exp DIVISION exp .)
    MENOS           reduce using rule 44 (exp -> exp DIVISION exp .)
    MULTIPLICACION  reduce using rule 44 (exp -> exp DIVISION exp .)
    DIVISION        reduce using rule 44 (exp -> exp DIVISION exp .)
    MODULO          reduce using rule 44 (exp -> exp DIVISION exp .)
    MAYOR           reduce using rule 44 (exp -> exp DIVISION exp .)
    MENOR           reduce using rule 44 (exp -> exp DIVISION exp .)
    IGUALIGUAL      reduce using rule 44 (exp -> exp DIVISION exp .)
    MAYORIGUAL      reduce using rule 44 (exp -> exp DIVISION exp .)
    MENORIGUAL      reduce using rule 44 (exp -> exp DIVISION exp .)
    DISTINTO        reduce using rule 44 (exp -> exp DIVISION exp .)
    ANDD            reduce using rule 44 (exp -> exp DIVISION exp .)
    ORR             reduce using rule 44 (exp -> exp DIVISION exp .)
    PTCOMA          reduce using rule 44 (exp -> exp DIVISION exp .)
    COMA            reduce using rule 44 (exp -> exp DIVISION exp .)
    CORDER          reduce using rule 44 (exp -> exp DIVISION exp .)
    POTENCIA        shift and go to state 58

  ! POTENCIA        [ reduce using rule 44 (exp -> exp DIVISION exp .) ]
  ! MAS             [ shift and go to state 54 ]
  ! MENOS           [ shift and go to state 55 ]
  ! MULTIPLICACION  [ shift and go to state 56 ]
  ! DIVISION        [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 59 ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 95

    (45) exp -> exp POTENCIA exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 45 (exp -> exp POTENCIA exp .)
    MAS             reduce using rule 45 (exp -> exp POTENCIA exp .)
    MENOS           reduce using rule 45 (exp -> exp POTENCIA exp .)
    MULTIPLICACION  reduce using rule 45 (exp -> exp POTENCIA exp .)
    DIVISION        reduce using rule 45 (exp -> exp POTENCIA exp .)
    POTENCIA        reduce using rule 45 (exp -> exp POTENCIA exp .)
    MODULO          reduce using rule 45 (exp -> exp POTENCIA exp .)
    MAYOR           reduce using rule 45 (exp -> exp POTENCIA exp .)
    MENOR           reduce using rule 45 (exp -> exp POTENCIA exp .)
    IGUALIGUAL      reduce using rule 45 (exp -> exp POTENCIA exp .)
    MAYORIGUAL      reduce using rule 45 (exp -> exp POTENCIA exp .)
    MENORIGUAL      reduce using rule 45 (exp -> exp POTENCIA exp .)
    DISTINTO        reduce using rule 45 (exp -> exp POTENCIA exp .)
    ANDD            reduce using rule 45 (exp -> exp POTENCIA exp .)
    ORR             reduce using rule 45 (exp -> exp POTENCIA exp .)
    PTCOMA          reduce using rule 45 (exp -> exp POTENCIA exp .)
    COMA            reduce using rule 45 (exp -> exp POTENCIA exp .)
    CORDER          reduce using rule 45 (exp -> exp POTENCIA exp .)

  ! MAS             [ shift and go to state 54 ]
  ! MENOS           [ shift and go to state 55 ]
  ! MULTIPLICACION  [ shift and go to state 56 ]
  ! DIVISION        [ shift and go to state 57 ]
  ! POTENCIA        [ shift and go to state 58 ]
  ! MODULO          [ shift and go to state 59 ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 96

    (46) exp -> exp MODULO exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 46 (exp -> exp MODULO exp .)
    MAS             reduce using rule 46 (exp -> exp MODULO exp .)
    MENOS           reduce using rule 46 (exp -> exp MODULO exp .)
    MULTIPLICACION  reduce using rule 46 (exp -> exp MODULO exp .)
    DIVISION        reduce using rule 46 (exp -> exp MODULO exp .)
    MODULO          reduce using rule 46 (exp -> exp MODULO exp .)
    MAYOR           reduce using rule 46 (exp -> exp MODULO exp .)
    MENOR           reduce using rule 46 (exp -> exp MODULO exp .)
    IGUALIGUAL      reduce using rule 46 (exp -> exp MODULO exp .)
    MAYORIGUAL      reduce using rule 46 (exp -> exp MODULO exp .)
    MENORIGUAL      reduce using rule 46 (exp -> exp MODULO exp .)
    DISTINTO        reduce using rule 46 (exp -> exp MODULO exp .)
    ANDD            reduce using rule 46 (exp -> exp MODULO exp .)
    ORR             reduce using rule 46 (exp -> exp MODULO exp .)
    PTCOMA          reduce using rule 46 (exp -> exp MODULO exp .)
    COMA            reduce using rule 46 (exp -> exp MODULO exp .)
    CORDER          reduce using rule 46 (exp -> exp MODULO exp .)
    POTENCIA        shift and go to state 58

  ! POTENCIA        [ reduce using rule 46 (exp -> exp MODULO exp .) ]
  ! MAS             [ shift and go to state 54 ]
  ! MENOS           [ shift and go to state 55 ]
  ! MULTIPLICACION  [ shift and go to state 56 ]
  ! DIVISION        [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 59 ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 97

    (47) exp -> exp MAYOR exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 47 (exp -> exp MAYOR exp .)
    MAYOR           reduce using rule 47 (exp -> exp MAYOR exp .)
    MENOR           reduce using rule 47 (exp -> exp MAYOR exp .)
    IGUALIGUAL      reduce using rule 47 (exp -> exp MAYOR exp .)
    MAYORIGUAL      reduce using rule 47 (exp -> exp MAYOR exp .)
    MENORIGUAL      reduce using rule 47 (exp -> exp MAYOR exp .)
    DISTINTO        reduce using rule 47 (exp -> exp MAYOR exp .)
    ANDD            reduce using rule 47 (exp -> exp MAYOR exp .)
    ORR             reduce using rule 47 (exp -> exp MAYOR exp .)
    PTCOMA          reduce using rule 47 (exp -> exp MAYOR exp .)
    COMA            reduce using rule 47 (exp -> exp MAYOR exp .)
    CORDER          reduce using rule 47 (exp -> exp MAYOR exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59

  ! MAS             [ reduce using rule 47 (exp -> exp MAYOR exp .) ]
  ! MENOS           [ reduce using rule 47 (exp -> exp MAYOR exp .) ]
  ! MULTIPLICACION  [ reduce using rule 47 (exp -> exp MAYOR exp .) ]
  ! DIVISION        [ reduce using rule 47 (exp -> exp MAYOR exp .) ]
  ! POTENCIA        [ reduce using rule 47 (exp -> exp MAYOR exp .) ]
  ! MODULO          [ reduce using rule 47 (exp -> exp MAYOR exp .) ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 98

    (48) exp -> exp MENOR exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 48 (exp -> exp MENOR exp .)
    MAYOR           reduce using rule 48 (exp -> exp MENOR exp .)
    MENOR           reduce using rule 48 (exp -> exp MENOR exp .)
    IGUALIGUAL      reduce using rule 48 (exp -> exp MENOR exp .)
    MAYORIGUAL      reduce using rule 48 (exp -> exp MENOR exp .)
    MENORIGUAL      reduce using rule 48 (exp -> exp MENOR exp .)
    DISTINTO        reduce using rule 48 (exp -> exp MENOR exp .)
    ANDD            reduce using rule 48 (exp -> exp MENOR exp .)
    ORR             reduce using rule 48 (exp -> exp MENOR exp .)
    PTCOMA          reduce using rule 48 (exp -> exp MENOR exp .)
    COMA            reduce using rule 48 (exp -> exp MENOR exp .)
    CORDER          reduce using rule 48 (exp -> exp MENOR exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59

  ! MAS             [ reduce using rule 48 (exp -> exp MENOR exp .) ]
  ! MENOS           [ reduce using rule 48 (exp -> exp MENOR exp .) ]
  ! MULTIPLICACION  [ reduce using rule 48 (exp -> exp MENOR exp .) ]
  ! DIVISION        [ reduce using rule 48 (exp -> exp MENOR exp .) ]
  ! POTENCIA        [ reduce using rule 48 (exp -> exp MENOR exp .) ]
  ! MODULO          [ reduce using rule 48 (exp -> exp MENOR exp .) ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 99

    (49) exp -> exp IGUALIGUAL exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for IGUALIGUAL resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for DISTINTO resolved as shift
  ! shift/reduce conflict for ANDD resolved as shift
  ! shift/reduce conflict for ORR resolved as shift
    PARDER          reduce using rule 49 (exp -> exp IGUALIGUAL exp .)
    PTCOMA          reduce using rule 49 (exp -> exp IGUALIGUAL exp .)
    COMA            reduce using rule 49 (exp -> exp IGUALIGUAL exp .)
    CORDER          reduce using rule 49 (exp -> exp IGUALIGUAL exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67

  ! MAS             [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MENOS           [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MULTIPLICACION  [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! DIVISION        [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! POTENCIA        [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MODULO          [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MAYOR           [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MENOR           [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! IGUALIGUAL      [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MAYORIGUAL      [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! MENORIGUAL      [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! DISTINTO        [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! ANDD            [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]
  ! ORR             [ reduce using rule 49 (exp -> exp IGUALIGUAL exp .) ]


state 100

    (50) exp -> exp MAYORIGUAL exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    MAYOR           reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    MENOR           reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    IGUALIGUAL      reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    MAYORIGUAL      reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    MENORIGUAL      reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    DISTINTO        reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    ANDD            reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    ORR             reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    PTCOMA          reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    COMA            reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    CORDER          reduce using rule 50 (exp -> exp MAYORIGUAL exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59

  ! MAS             [ reduce using rule 50 (exp -> exp MAYORIGUAL exp .) ]
  ! MENOS           [ reduce using rule 50 (exp -> exp MAYORIGUAL exp .) ]
  ! MULTIPLICACION  [ reduce using rule 50 (exp -> exp MAYORIGUAL exp .) ]
  ! DIVISION        [ reduce using rule 50 (exp -> exp MAYORIGUAL exp .) ]
  ! POTENCIA        [ reduce using rule 50 (exp -> exp MAYORIGUAL exp .) ]
  ! MODULO          [ reduce using rule 50 (exp -> exp MAYORIGUAL exp .) ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 101

    (51) exp -> exp MENORIGUAL exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    MAYOR           reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    MENOR           reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    IGUALIGUAL      reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    MAYORIGUAL      reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    MENORIGUAL      reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    DISTINTO        reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    ANDD            reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    ORR             reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    PTCOMA          reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    COMA            reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    CORDER          reduce using rule 51 (exp -> exp MENORIGUAL exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59

  ! MAS             [ reduce using rule 51 (exp -> exp MENORIGUAL exp .) ]
  ! MENOS           [ reduce using rule 51 (exp -> exp MENORIGUAL exp .) ]
  ! MULTIPLICACION  [ reduce using rule 51 (exp -> exp MENORIGUAL exp .) ]
  ! DIVISION        [ reduce using rule 51 (exp -> exp MENORIGUAL exp .) ]
  ! POTENCIA        [ reduce using rule 51 (exp -> exp MENORIGUAL exp .) ]
  ! MODULO          [ reduce using rule 51 (exp -> exp MENORIGUAL exp .) ]
  ! MAYOR           [ shift and go to state 60 ]
  ! MENOR           [ shift and go to state 61 ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! MAYORIGUAL      [ shift and go to state 63 ]
  ! MENORIGUAL      [ shift and go to state 64 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 102

    (52) exp -> exp DISTINTO exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 52 (exp -> exp DISTINTO exp .)
    IGUALIGUAL      reduce using rule 52 (exp -> exp DISTINTO exp .)
    DISTINTO        reduce using rule 52 (exp -> exp DISTINTO exp .)
    ANDD            reduce using rule 52 (exp -> exp DISTINTO exp .)
    ORR             reduce using rule 52 (exp -> exp DISTINTO exp .)
    PTCOMA          reduce using rule 52 (exp -> exp DISTINTO exp .)
    COMA            reduce using rule 52 (exp -> exp DISTINTO exp .)
    CORDER          reduce using rule 52 (exp -> exp DISTINTO exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64

  ! MAS             [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MENOS           [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MULTIPLICACION  [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! DIVISION        [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! POTENCIA        [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MODULO          [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MAYOR           [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MENOR           [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MAYORIGUAL      [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! MENORIGUAL      [ reduce using rule 52 (exp -> exp DISTINTO exp .) ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! DISTINTO        [ shift and go to state 65 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 103

    (53) exp -> exp ANDD exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 53 (exp -> exp ANDD exp .)
    IGUALIGUAL      reduce using rule 53 (exp -> exp ANDD exp .)
    ANDD            reduce using rule 53 (exp -> exp ANDD exp .)
    PTCOMA          reduce using rule 53 (exp -> exp ANDD exp .)
    COMA            reduce using rule 53 (exp -> exp ANDD exp .)
    CORDER          reduce using rule 53 (exp -> exp ANDD exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ORR             shift and go to state 67

  ! MAS             [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MENOS           [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MULTIPLICACION  [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! DIVISION        [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! POTENCIA        [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MODULO          [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MAYOR           [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MENOR           [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MAYORIGUAL      [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! MENORIGUAL      [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! DISTINTO        [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! ORR             [ reduce using rule 53 (exp -> exp ANDD exp .) ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! ANDD            [ shift and go to state 66 ]


state 104

    (54) exp -> exp ORR exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 54 (exp -> exp ORR exp .)
    IGUALIGUAL      reduce using rule 54 (exp -> exp ORR exp .)
    ANDD            reduce using rule 54 (exp -> exp ORR exp .)
    ORR             reduce using rule 54 (exp -> exp ORR exp .)
    PTCOMA          reduce using rule 54 (exp -> exp ORR exp .)
    COMA            reduce using rule 54 (exp -> exp ORR exp .)
    CORDER          reduce using rule 54 (exp -> exp ORR exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65

  ! MAS             [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MENOS           [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MULTIPLICACION  [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! DIVISION        [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! POTENCIA        [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MODULO          [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MAYOR           [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MENOR           [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! MENORIGUAL      [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! DISTINTO        [ reduce using rule 54 (exp -> exp ORR exp .) ]
  ! IGUALIGUAL      [ shift and go to state 62 ]
  ! ANDD            [ shift and go to state 66 ]
  ! ORR             [ shift and go to state 67 ]


state 105

    (67) listArray -> listArray CORIZQ . exp CORDER
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 120

state 106

    (68) listArray -> CORIZQ exp . CORDER
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    CORDER          shift and go to state 121
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 107

    (66) exp -> CORIZQ listValues CORDER .

    PARDER          reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MAS             reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MENOS           reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MULTIPLICACION  reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    DIVISION        reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    POTENCIA        reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MODULO          reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MAYOR           reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MENOR           reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    IGUALIGUAL      reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MAYORIGUAL      reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    MENORIGUAL      reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    DISTINTO        reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    ANDD            reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    ORR             reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    PTCOMA          reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    COMA            reduce using rule 66 (exp -> CORIZQ listValues CORDER .)
    CORDER          reduce using rule 66 (exp -> CORIZQ listValues CORDER .)


state 108

    (14) p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .

    PRINT           reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    PRINTLN         reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    LET             reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    ID              reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    FUNCTION        reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    RWHILE          reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    RIF             reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    $end            reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)
    LLAVEDER        reduce using rule 14 (p_println -> PRINTLN PARIZQ exp PARDER PTCOMA .)


state 109

    (15) declaration -> LET ID DOSPT typeDef decArray . IGUAL exp PTCOMA

    IGUAL           shift and go to state 122


state 110

    (32) decArray -> CORIZQ . CORDER

    CORDER          shift and go to state 123


state 111

    (33) decArray -> empty .

    IGUAL           reduce using rule 33 (decArray -> empty .)


state 112

    (34) listValues -> listValues COMA exp .
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PARDER          reduce using rule 34 (listValues -> listValues COMA exp .)
    COMA            reduce using rule 34 (listValues -> listValues COMA exp .)
    CORDER          reduce using rule 34 (listValues -> listValues COMA exp .)
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 113

    (17) function -> FUNCTION ID parametersFunc DOSPT typeDef . block
    (26) block -> . LLAVEIZQ instructions LLAVEDER
    (27) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 118

    block                          shift and go to state 124

state 114

    (18) parametersFunc -> PARIZQ parameters PARDER .

    DOSPT           reduce using rule 18 (parametersFunc -> PARIZQ parameters PARDER .)


state 115

    (21) parameters -> parameters COMA . parameter
    (23) parameter -> . ID DOSPT typeDef

    ID              shift and go to state 86

    parameter                      shift and go to state 125

state 116

    (23) parameter -> ID DOSPT . typeDef
    (36) typeDef -> . RSTRING
    (37) typeDef -> . RINT
    (38) typeDef -> . RFLOAT
    (39) typeDef -> . RBOOL
    (40) typeDef -> . RCHAR

    RSTRING         shift and go to state 74
    RINT            shift and go to state 75
    RFLOAT          shift and go to state 76
    RBOOL           shift and go to state 77
    RCHAR           shift and go to state 78

    typeDef                        shift and go to state 126

state 117

    (28) whileSt -> RWHILE PARIZQ exp PARDER block .

    PRINT           reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    PRINTLN         reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    LET             reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    ID              reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    FUNCTION        reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    RWHILE          reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    RIF             reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    $end            reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)
    LLAVEDER        reduce using rule 28 (whileSt -> RWHILE PARIZQ exp PARDER block .)


state 118

    (26) block -> LLAVEIZQ . instructions LLAVEDER
    (27) block -> LLAVEIZQ . LLAVEDER
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) instruction -> . function
    (9) instruction -> . callFuncSt
    (10) instruction -> . whileSt
    (11) instruction -> . ifSt
    (13) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (14) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (15) declaration -> . LET ID DOSPT typeDef decArray IGUAL exp PTCOMA
    (16) assignment -> . ID IGUAL exp PTCOMA
    (17) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (20) callFuncSt -> . ID parametersCallFunc PTCOMA
    (28) whileSt -> . RWHILE PARIZQ exp PARDER block
    (29) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    LLAVEDER        shift and go to state 128
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    LET             shift and go to state 14
    ID              shift and go to state 15
    FUNCTION        shift and go to state 16
    RWHILE          shift and go to state 17
    RIF             shift and go to state 18

    instructions                   shift and go to state 127
    instruction                    shift and go to state 3
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    function                       shift and go to state 8
    callFuncSt                     shift and go to state 9
    whileSt                        shift and go to state 10
    ifSt                           shift and go to state 11

state 119

    (29) ifSt -> RIF PARIZQ exp PARDER block . elseSt
    (30) elseSt -> . RELSE block
    (31) elseSt -> . ifSt
    (29) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    RELSE           shift and go to state 130
    RIF             shift and go to state 18

    elseSt                         shift and go to state 129
    ifSt                           shift and go to state 131

state 120

    (67) listArray -> listArray CORIZQ exp . CORDER
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    CORDER          shift and go to state 132
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 121

    (68) listArray -> CORIZQ exp CORDER .

    CORIZQ          reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    PARDER          reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MAS             reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MENOS           reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MULTIPLICACION  reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    DIVISION        reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    POTENCIA        reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MODULO          reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MAYOR           reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MENOR           reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    IGUALIGUAL      reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MAYORIGUAL      reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    MENORIGUAL      reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    DISTINTO        reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    ANDD            reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    ORR             reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    PTCOMA          reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    COMA            reduce using rule 68 (listArray -> CORIZQ exp CORDER .)
    CORDER          reduce using rule 68 (listArray -> CORIZQ exp CORDER .)


state 122

    (15) declaration -> LET ID DOSPT typeDef decArray IGUAL . exp PTCOMA
    (41) exp -> . exp MAS exp
    (42) exp -> . exp MENOS exp
    (43) exp -> . exp MULTIPLICACION exp
    (44) exp -> . exp DIVISION exp
    (45) exp -> . exp POTENCIA exp
    (46) exp -> . exp MODULO exp
    (47) exp -> . exp MAYOR exp
    (48) exp -> . exp MENOR exp
    (49) exp -> . exp IGUALIGUAL exp
    (50) exp -> . exp MAYORIGUAL exp
    (51) exp -> . exp MENORIGUAL exp
    (52) exp -> . exp DISTINTO exp
    (53) exp -> . exp ANDD exp
    (54) exp -> . exp ORR exp
    (55) exp -> . NOTT exp
    (56) exp -> . PARIZQ exp PARDER
    (57) exp -> . ENTERO
    (58) exp -> . DECIMAL
    (59) exp -> . STRING
    (60) exp -> . CHAR
    (61) exp -> . VERDADERO
    (62) exp -> . FALSO
    (63) exp -> . NULO
    (64) exp -> . ID
    (65) exp -> . ID listArray
    (66) exp -> . CORIZQ listValues CORDER

    NOTT            shift and go to state 31
    PARIZQ          shift and go to state 29
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    STRING          shift and go to state 34
    CHAR            shift and go to state 35
    VERDADERO       shift and go to state 36
    FALSO           shift and go to state 37
    NULO            shift and go to state 38
    ID              shift and go to state 39
    CORIZQ          shift and go to state 40

    exp                            shift and go to state 133

state 123

    (32) decArray -> CORIZQ CORDER .

    IGUAL           reduce using rule 32 (decArray -> CORIZQ CORDER .)


state 124

    (17) function -> FUNCTION ID parametersFunc DOSPT typeDef block .

    PRINT           reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    PRINTLN         reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    LET             reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    ID              reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    FUNCTION        reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    RWHILE          reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    RIF             reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    $end            reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)
    LLAVEDER        reduce using rule 17 (function -> FUNCTION ID parametersFunc DOSPT typeDef block .)


state 125

    (21) parameters -> parameters COMA parameter .

    PARDER          reduce using rule 21 (parameters -> parameters COMA parameter .)
    COMA            reduce using rule 21 (parameters -> parameters COMA parameter .)


state 126

    (23) parameter -> ID DOSPT typeDef .

    PARDER          reduce using rule 23 (parameter -> ID DOSPT typeDef .)
    COMA            reduce using rule 23 (parameter -> ID DOSPT typeDef .)


state 127

    (26) block -> LLAVEIZQ instructions . LLAVEDER
    (2) instructions -> instructions . instruction
    (4) instruction -> . p_print
    (5) instruction -> . p_println
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) instruction -> . function
    (9) instruction -> . callFuncSt
    (10) instruction -> . whileSt
    (11) instruction -> . ifSt
    (13) p_print -> . PRINT PARIZQ exp PARDER PTCOMA
    (14) p_println -> . PRINTLN PARIZQ exp PARDER PTCOMA
    (15) declaration -> . LET ID DOSPT typeDef decArray IGUAL exp PTCOMA
    (16) assignment -> . ID IGUAL exp PTCOMA
    (17) function -> . FUNCTION ID parametersFunc DOSPT typeDef block
    (20) callFuncSt -> . ID parametersCallFunc PTCOMA
    (28) whileSt -> . RWHILE PARIZQ exp PARDER block
    (29) ifSt -> . RIF PARIZQ exp PARDER block elseSt

    LLAVEDER        shift and go to state 134
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    LET             shift and go to state 14
    ID              shift and go to state 15
    FUNCTION        shift and go to state 16
    RWHILE          shift and go to state 17
    RIF             shift and go to state 18

    instruction                    shift and go to state 19
    p_print                        shift and go to state 4
    p_println                      shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    function                       shift and go to state 8
    callFuncSt                     shift and go to state 9
    whileSt                        shift and go to state 10
    ifSt                           shift and go to state 11

state 128

    (27) block -> LLAVEIZQ LLAVEDER .

    PRINT           reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    PRINTLN         reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    LET             reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    ID              reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    FUNCTION        reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    RWHILE          reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    RIF             reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    $end            reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    LLAVEDER        reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)
    RELSE           reduce using rule 27 (block -> LLAVEIZQ LLAVEDER .)


state 129

    (29) ifSt -> RIF PARIZQ exp PARDER block elseSt .

    PRINT           reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    PRINTLN         reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    LET             reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    ID              reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    FUNCTION        reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    RWHILE          reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    RIF             reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    $end            reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)
    LLAVEDER        reduce using rule 29 (ifSt -> RIF PARIZQ exp PARDER block elseSt .)


state 130

    (30) elseSt -> RELSE . block
    (26) block -> . LLAVEIZQ instructions LLAVEDER
    (27) block -> . LLAVEIZQ LLAVEDER

    LLAVEIZQ        shift and go to state 118

    block                          shift and go to state 135

state 131

    (31) elseSt -> ifSt .

    PRINT           reduce using rule 31 (elseSt -> ifSt .)
    PRINTLN         reduce using rule 31 (elseSt -> ifSt .)
    LET             reduce using rule 31 (elseSt -> ifSt .)
    ID              reduce using rule 31 (elseSt -> ifSt .)
    FUNCTION        reduce using rule 31 (elseSt -> ifSt .)
    RWHILE          reduce using rule 31 (elseSt -> ifSt .)
    RIF             reduce using rule 31 (elseSt -> ifSt .)
    $end            reduce using rule 31 (elseSt -> ifSt .)
    LLAVEDER        reduce using rule 31 (elseSt -> ifSt .)


state 132

    (67) listArray -> listArray CORIZQ exp CORDER .

    CORIZQ          reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    PARDER          reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MAS             reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MENOS           reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MULTIPLICACION  reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    DIVISION        reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    POTENCIA        reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MODULO          reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MAYOR           reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MENOR           reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    IGUALIGUAL      reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MAYORIGUAL      reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    MENORIGUAL      reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    DISTINTO        reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    ANDD            reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    ORR             reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    PTCOMA          reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    COMA            reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)
    CORDER          reduce using rule 67 (listArray -> listArray CORIZQ exp CORDER .)


state 133

    (15) declaration -> LET ID DOSPT typeDef decArray IGUAL exp . PTCOMA
    (41) exp -> exp . MAS exp
    (42) exp -> exp . MENOS exp
    (43) exp -> exp . MULTIPLICACION exp
    (44) exp -> exp . DIVISION exp
    (45) exp -> exp . POTENCIA exp
    (46) exp -> exp . MODULO exp
    (47) exp -> exp . MAYOR exp
    (48) exp -> exp . MENOR exp
    (49) exp -> exp . IGUALIGUAL exp
    (50) exp -> exp . MAYORIGUAL exp
    (51) exp -> exp . MENORIGUAL exp
    (52) exp -> exp . DISTINTO exp
    (53) exp -> exp . ANDD exp
    (54) exp -> exp . ORR exp

    PTCOMA          shift and go to state 136
    MAS             shift and go to state 54
    MENOS           shift and go to state 55
    MULTIPLICACION  shift and go to state 56
    DIVISION        shift and go to state 57
    POTENCIA        shift and go to state 58
    MODULO          shift and go to state 59
    MAYOR           shift and go to state 60
    MENOR           shift and go to state 61
    IGUALIGUAL      shift and go to state 62
    MAYORIGUAL      shift and go to state 63
    MENORIGUAL      shift and go to state 64
    DISTINTO        shift and go to state 65
    ANDD            shift and go to state 66
    ORR             shift and go to state 67


state 134

    (26) block -> LLAVEIZQ instructions LLAVEDER .

    PRINT           reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    PRINTLN         reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    LET             reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    ID              reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    FUNCTION        reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    RWHILE          reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    RIF             reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    $end            reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    LLAVEDER        reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)
    RELSE           reduce using rule 26 (block -> LLAVEIZQ instructions LLAVEDER .)


state 135

    (30) elseSt -> RELSE block .

    PRINT           reduce using rule 30 (elseSt -> RELSE block .)
    PRINTLN         reduce using rule 30 (elseSt -> RELSE block .)
    LET             reduce using rule 30 (elseSt -> RELSE block .)
    ID              reduce using rule 30 (elseSt -> RELSE block .)
    FUNCTION        reduce using rule 30 (elseSt -> RELSE block .)
    RWHILE          reduce using rule 30 (elseSt -> RELSE block .)
    RIF             reduce using rule 30 (elseSt -> RELSE block .)
    $end            reduce using rule 30 (elseSt -> RELSE block .)
    LLAVEDER        reduce using rule 30 (elseSt -> RELSE block .)


state 136

    (15) declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .

    PRINT           reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    PRINTLN         reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    LET             reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    ID              reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    FUNCTION        reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    RWHILE          reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    RIF             reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    $end            reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)
    LLAVEDER        reduce using rule 15 (declaration -> LET ID DOSPT typeDef decArray IGUAL exp PTCOMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 99 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 99 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 99 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 99 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 99 resolved as shift
WARNING: shift/reduce conflict for IGUALIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for DISTINTO in state 99 resolved as shift
WARNING: shift/reduce conflict for ANDD in state 99 resolved as shift
WARNING: shift/reduce conflict for ORR in state 99 resolved as shift
